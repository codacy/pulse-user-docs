{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started with Pulse","text":"<p>Pulse displays the following metrics to provide insights into the current and historic performance of your software delivery process:</p> <ul> <li>Accelerate metrics</li> <li>Changes and reviews metrics</li> <li>Work in progress metrics</li> <li>Lead time and cycle time</li> </ul> <p>Check out our product demo for an overview of Pulse's main features (recorded on January 16, 2023):</p> <p>To calculate these metrics, you must complete these main steps to set up Pulse and to collect information from key events of your particular software development workflow:</p> <ol> <li> <p>Creating your organization on Pulse</p> <p>Your organization on Pulse will aggregate and present all information relevant to your software development workflow.</p> </li> <li> <p>Pushing data to Pulse</p> <p>Send data about the key events in your software delivery workflow to feed the Pulse dashboards in real time.</p> </li> <li> <p>Sharing access with teammates</p> <p>Invite your teammates to your Pulse organization to share the access to the dashboards and metrics.</p> </li> </ol>"},{"location":"#1-creating-your-organization-on-pulse","title":"1. Creating your organization on Pulse","text":"<p>You must create an organization on Pulse to start the onboarding. Click the link in the welcome banner at the top of the page and follow the instructions.</p> <p></p> <p>To add more organizations, click the name of the current organization on the top left-hand corner and select Create Organization.</p>"},{"location":"#2-pushing-data-to-pulse","title":"2. Pushing data to Pulse","text":"<p>Pulse provides push-based integrations with your workflow using the following alternatives:</p> <ul> <li> <p>One-click integrations</p> <p>Pulse currently supports the \"one-click\" integrations listed in the table below that simplify the process of setting up your workflows to send data to Pulse.</p> <p> Use this one-click integration... to report... necessary to calculate... GitHub integration or Bitbucket integration changes and deployments the Accelerate metrics deployment frequency and lead time for changes, including the drill-down metrics changes and reviews, and work in progress incidents the Accelerate metrics time to recover and change failure rate Jira integration issues lead and cycle time metrics incidents the Accelerate metrics time to recover and change failure rate PagerDuty integration incidents the Accelerate metrics time to recover and change failure rate </p> <p>Note</p> <p>We recommend that whenever possible you use the integrations that match your stack because they're faster to set up. We plan to continue developing integrations for the most popular Git providers, CI/CD platforms, and incident management tools.</p> </li> <li> <p>Pulse CLI</p> <p>The Pulse CLI is a binary that you can use to push data to Pulse directly from your CI/CD workflows.</p> </li> <li> <p>Pulse Ingestion API</p> <p>Use the Pulse Ingestion API in scenarios where it may not be feasible to use the CLI to send data to Pulse, such as when you have the data inside an application.</p> </li> </ul>"},{"location":"#3-sharing-access-with-teammates","title":"3. Sharing access with teammates","text":"<p>Share the Pulse dashboards with your teammates to bring more visibility to the metrics.</p> <p>The most convenient way of ensuring that all the members of your company have access to the Pulse dashboards is by enabling the feature Joining via email domain on the Organization page. When this option is enabled, anyone who signs up to Pulse using an email address from your company is automatically added to your Pulse organization.</p> <p>Alternatively, copy the invitation link from the Organization page and share the link with specific people. A convenient way to do this is to share and pin the link on your team's chat. The link is valid for 3 months, but you can refresh it at any moment.</p> <p></p> <p>Newcomers will have access to all dashboards immediately after signing up without needing to perform any integration.</p> <p>About joining via email domain</p> <p>Consider the following when using joining via email domain:</p> <ul> <li> <p>Joining via email domain isn't available for free email addresses.</p> </li> <li> <p>Each email domain can only be used in one Pulse organization.</p> <p>If an existing organization is already using your email domain to automatically join new users, you won't be able to activate this feature on another organization.</p> </li> <li> <p>You can only enable joining via the email domain that you used to sign in to Pulse.</p> <p>If you turn off the feature, you can only re-enable it using your email domain.</p> </li> <li> <p>Turning off joining via email domain doesn't remove users from the organization.</p> <p>If you turn off the feature, the users that joined while the feature was active will continue to have access to the organization on Pulse.</p> </li> </ul> <p>If you come across any issues please contact support.</p>"},{"location":"notes/","title":"Tracking the impact of changes","text":"<p>Some changes in your organization, either internal or external to the environment, can impact your software delivery process. For example, changes in the team structure or membership, teams adopting new working processes, or major events affecting the system stability, might have a positive or negative impact on the performance of your teams.</p> <p>Pulse enables you to track and correlate the impact that specific changes might have on the performance of your teams using notes to signal actions or events that took place on a specific date.</p> <p></p> <p>Pulse shows your organization notes across the different dashboards - Accelerate overview, Changes &amp; Reviews, and Lead &amp; Cycle time. This way you can compare each performance metric before and after a specific change.</p> <p>Note</p> <ul> <li>Notes are global to the organization. Any member can view, add, or delete any note.</li> <li>Pulse dashboards show the latest 100 notes for the selected time range.</li> </ul>"},{"location":"notes/#using-notes","title":"Using notes","text":"<p>Pulse dashboards show a vertical line when there are notes for that period. Hover over a line to display the notes icon below, near the date axis. Click the notes icon to open the notes card and see all the notes for that period.</p> <p></p> <p>On the notes card, you can add new notes for the same period and delete existing notes.</p> <p></p> <p>To add a new note for a specific date period, hover the mouse below that period near the date axis and click the add icon.</p> <p></p>"},{"location":"cli/cli/","title":"Using the Pulse CLI","text":"<p>To measure the performance of your team you must send information to Pulse about changes, deployments, and incidents whenever they happen in the software delivery workflow of your primary application or service.</p> <p>To push information about these key events to Pulse using the CLI you must complete these main steps:</p> <ol> <li> <p>Installing the Pulse CLI</p> <p>Download and set up the latest version of the Pulse CLI binary.</p> </li> <li> <p>Pushing changes and deployments</p> <p>Push information about changes and deployments when they happen on your software delivery workflow.</p> </li> <li> <p>Pushing incidents</p> <p>Push information about incidents when they're solved.</p> </li> </ol> <p>Note</p> <p>The Pulse CLI is a simplified abstraction over the Pulse Ingestion API. If the CLI requirements below don't fit your use case, explore the Ingestion API docs for interacting directly with the API.</p>"},{"location":"cli/cli/#before-you-begin","title":"Before you begin","text":"<p>Consider the following before setting up the integration using the Pulse CLI:</p> <ul> <li> <p>Make sure that you have an API key provided by Pulse to identify your organization and authorize you to send data to Pulse.</p> </li> <li> <p>When reporting events to Pulse you should use the field <code>system</code> to associate each event with the most granular unit that you will use to filter data on the Pulse dashboards, such as by application or service, product, or any other entity or group of entities in your organization.</p> <p>Important</p> <p>Typically, the value of <code>system</code> should be the name of the CVS repository corresponding to the event.</p> <p>However, if you're using a monorepo the value of <code>system</code> should be the name of the component in the repository instead.</p> <p>Although the field <code>system</code> is optional, if you don't report this information you won't be able to filter the data on the Pulse dashboards. Events without a specified <code>system</code> will be grouped under a special system called <code>_unknown_</code>.</p> </li> <li> <p>When reporting deployments to Pulse you should use the field <code>teams</code> to associate each deployment with the list of teams that contributed with changes included in the deployment.</p> </li> </ul>"},{"location":"cli/cli/#1-installing-the-pulse-cli","title":"1. Installing the Pulse CLI","text":"<p>Download the latest version of the Pulse CLI for your operating system and make sure that you're able to run the binary.</p> <p>Tip</p> <p>If you're using GitHub but our one-click integration doesn't fit your requirements we recommend that you use our Pulse GitHub Action as a convenient way to report events directly from your GitHub Actions workflows.</p> <p>The Pulse GitHub Action acts as a wrapper for the Pulse CLI and accepts the same fields as the Pulse CLI.</p> <ol> <li> <p>Run the command to download the correct binary for your operating system:</p> LinuxmacOSWindows <p>On 32-bit operating systems:</p> <pre><code>curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/latest/pulse-event-cli_linux_386/pulse-event-cli &amp;&amp; \\\nchmod +x pulse-event-cli\n</code></pre> <p>On 64-bit operating systems:</p> <pre><code>curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/latest/pulse-event-cli_linux_amd64/pulse-event-cli &amp;&amp; \\\nchmod +x pulse-event-cli\n</code></pre> <pre><code>curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/latest/pulse-event-cli_darwin_amd64/pulse-event-cli &amp;&amp; \\\nchmod +x pulse-event-cli\n</code></pre> <p>On 32-bit operating systems:</p> <pre><code>curl -fsSL -o pulse-event-cli.exe https://artifacts.codacy.com/codacy/pulse/event-cli/latest/pulse-event-cli_windows_386/pulse-event-cli.exe\n</code></pre> <p>On 64-bit operating systems:</p> <pre><code>curl -fsSL -o pulse-event-cli.exe https://artifacts.codacy.com/codacy/pulse/event-cli/latest/pulse-event-cli_windows_amd64/pulse-event-cli.exe\n</code></pre> </li> <li> <p>Test if you can run the CLI:</p> Linux and macOSWindows <pre><code>./pulse-event-cli help\n</code></pre> <pre><code>pulse-event-cli.exe help\n</code></pre> </li> </ol> <p>If you need a specific Pulse CLI use the commands above but replace <code>latest</code> with the version you want.</p>"},{"location":"cli/cli/#2-pushing-changes-and-deployments","title":"2. Pushing changes and deployments","text":"<p>Report an event to Pulse whenever your team deploys code to production, including the list of code changes included in that deployment:</p> <ul> <li>For SaaS applications, report the event on each deployment to your production environment.</li> <li>For self-hosted applications, a better option is to report the event each time you make an artifact available to any user of your application, such as when you release new binaries or upload a new version to an app store.</li> </ul> <p>Pulse uses these reports to calculate the metrics Lead time for changes and Deployment frequency.</p>"},{"location":"cli/cli/#using-git","title":"Using Git","text":"<p>If you're using Git, send the following information when reporting changes and deployments to Pulse:</p> Field Description Format previous-deployment-ref Git reference of the previous deployment.This can be a tag or a commit identifier. String identifier Version number or another unique identifier of the deployment. String timestamp Time when the deployment finished. Number(Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String teams Optional. Teams responsible for the changes in the deployment. String(comma-separated list) <p>Run the following command to report a deployment and its changes:</p> Linux and macOSWindows <pre><code>git clone &lt;Git repository URL&gt;\ncd &lt;local Git repository directory&gt;\n./pulse-event-cli push git deployment \\\n--api-key \"&lt;API key&gt;\" \\\n--previous-deployment-ref \"&lt;previous deployment ref&gt;\" \\\n--identifier \"&lt;deployment identifier&gt;\" \\\n--timestamp \"$(date +%s)\" \\\n[--system \"&lt;system&gt;\"] \\\n[--teams &lt;comma-separated list of teams&gt;]\n</code></pre> <pre><code>git clone &lt;Git repository URL&gt;\ncd &lt;local Git repository directory&gt;\nevent-cli.exe push git deployment \\\n--api-key \"&lt;API key&gt;\" \\\n--previous-deployment-ref \"&lt;previous deployment ref&gt;\" \\\n--identifier \"&lt;deployment identifier&gt;\" \\\n--timestamp \"&lt;timestamp&gt;\" \\\n[--system \"&lt;system&gt;\"] \\\n[--teams &lt;comma-separated list of teams&gt;]\n</code></pre> <p>The command automatically reports all commits done between the previous deployment and the <code>HEAD</code> of the Git repository as changes that belong to the deployment being reported.</p>"},{"location":"cli/cli/#without-using-git","title":"Without using Git","text":"<p>If you don't use Git or prefer to have more fine-grained control over the information that you send when reporting changes and deployments, send separate reports for each change and deployment as described below.</p> <p>Tip</p> <p>If you're using Git, it's simpler to report changes and deployments together.</p> <ol> <li> <p>Send the following information when reporting changes to Pulse:</p> Field Description Format identifier The commit identifier. String timestamp Time when the commit was first pushed to the repository. Number(Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String <p>Run the following command to report each change:</p> Linux and macOSWindows <pre><code>./pulse-event-cli push change \\\n--api-key \"&lt;API key&gt;\" \\\n--identifier \"&lt;change identifier&gt;\" \\\n--timestamp \"$(date +%s)\" \\\n[--system \"&lt;system&gt;\"]\n</code></pre> <pre><code>event-cli.exe push change \\\n--api-key \"&lt;API key&gt;\" \\\n--identifier \"&lt;change identifier&gt;\" \\\n--timestamp \"&lt;timestamp&gt;\" \\\n[--system \"&lt;system&gt;\"]\n</code></pre> </li> <li> <p>Send the following information when reporting deployments to Pulse:</p> Field Description Format identifier Version number or another unique identifier of the deployment. String timestamp Time when the deployment finished. Number(Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String teams Optional. Teams responsible for the changes in the deployment. String(comma-separated list) Commit identifiers included in the deployment. String(space-separated list) <p>Run the following command to report each deployment:</p> Linux and macOSWindows <pre><code>./pulse-event-cli push deployment \\\n--api-key \"&lt;API key&gt;\" \\\n--identifier \"&lt;deployment identifier&gt;\" \\\n--timestamp \"$(date +%s)\" \\\n[--system \"&lt;system&gt;\"] \\\n[--teams &lt;comma-separated list of teams&gt;] \\\n&lt;space-separated list of commit identifiers&gt;\n</code></pre> <pre><code>event-cli.exe push deployment \\\n--api-key \"&lt;API key&gt;\" \\\n--identifier \"&lt;deployment identifier&gt;\" \\\n--timestamp \"&lt;timestamp&gt;\" \\\n[--system \"&lt;system&gt;\"] \\\n[--teams &lt;comma-separated list of teams&gt;] \\\n&lt;space-separated list of commit identifiers&gt;\n</code></pre> </li> </ol>"},{"location":"cli/cli/#3-pushing-incidents","title":"3. Pushing incidents","text":"<p>Report an event to Pulse whenever an incident resulting from a release or infrastructure configuration change to production is solved. Incidents are any form of degraded service that require remediation:</p> <ul> <li>The incident is created when you detect a service impairment or service outage in production.</li> <li>The incident is resolved when you apply a hotfix or patch, or when you rollback the changes to restore the service in production.</li> </ul> <p>Typically, it's possible to keep track of this information using your monitoring infrastructure or your ticketing system.</p> <p>Pulse uses these reports to calculate the metrics Time to recover and Change failure rate.</p> <p>Send the following information when reporting incidents to Pulse:</p> Field Description Format identifier A unique identifier of the incident. String timestampCreated Time when the incident started or was detected. Number(Unix epoch timestamp in seconds) timestampResolved Time when the incident was resolved. Number(Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String <p>Run the following command to report each incident:</p> Linux and macOSWindows <pre><code>./pulse-event-cli push incident \\\n--api-key \"&lt;API key&gt;\" \\\n--identifier \"&lt;incident identifier&gt;\" \\\n--timestampCreated \"&lt;timestampCreated&gt;\" \\\n--timestampResolved \"$(date +%s)\" \\\n[--system \"&lt;system&gt;\"]\n</code></pre> <pre><code>pulse-event-cli.exe push incident \\\n--api-key \"&lt;API key&gt;\" \\\n--identifier \"&lt;incident identifier&gt;\" \\\n--timestampCreated \"&lt;timestampCreated&gt;\" \\\n--timestampResolved \"&lt;timestampResolved&gt;\" \\\n[--system \"&lt;system&gt;\"]\n</code></pre>"},{"location":"cli/cli/#see-also","title":"See also","text":"<ul> <li>Accelerate metrics</li> <li>Changes and reviews metrics</li> </ul>"},{"location":"cli/examples/","title":"Integration examples","text":"<p>This page includes examples of scripts that we used to populate our own Pulse dashboard with historical data.</p> <p>You can use the examples to understand better how you can integrate the Pulse CLI with your existing workflows, or adapt these examples to populate your Pulse dashboard with historical data from your team.</p>"},{"location":"cli/examples/#pushing-historic-changes-and-deployments","title":"Pushing historic changes and deployments","text":"<p>In this example, we used the Pulse CLI to push past changes and deployments from a Git repository into Pulse.</p> <p>Deployments are identified using semantic version Git tags, and the changes are the commits included in those deployments.</p> <pre><code># example.sh\n\n#!/usr/bin/env bash\n\nset -e\n\nCREDENTIALS=\"xxx\"\n\nworkdir=$(mktemp -d -t website-dora-XXXXXXXXXX)\n\nfunction clean {\nrm -rf ${workdir}\n}\ntrap clean EXIT\n\ngit clone git@bitbucket.org:qamine/codacy-website \"$workdir\"\ncd ${workdir}\nmapfile -t deployments &lt; &lt;( git for-each-ref --sort=creatordate --format '%(refname) %(objectname)' refs/tags | grep -E '^refs\\/tags\\/[0-9]+\\.[0-9]+\\.[0-9]+\\s' | awk -F\"\\/\" '{print $3}' )\nprevious_deployment=\"\"\ncurrent_deployment=\"\"\nfor deployment in \"${deployments[@]}\"\ndo\ndeployment_id=$(echo \"${deployment}\" | awk '{print $1}')\ndeployment_sha=$(echo \"${deployment}\" | awk '{print $2}')\ndeployment_date=$(git log --format=\"%at\" ${deployment_sha} | head -n 1)\n\n# Skip deployments before date\n# If you are on macOS you need to use $(date -jf \"%b %d %Y\" \"Oct 01 2020\" +%s) instead\nif [ ${deployment_date} -lt $(date -d \"Oct 01 2020\" +%s) ]\nthen\ncontinue\nfi\n\nif [ -z \"${previous_deployment}\" ]\nthen\nprevious_deployment=\"${deployment_sha}\"\ncontinue\nelse\ncurrent_deployment=\"${deployment_sha}\"\n\ndeployment_changes=()\nmapfile -t deployment_changes &lt; &lt;( git log --format=\"%H\" ${previous_deployment}...${current_deployment} )\n\nif [ ${#deployment_changes[@]} -gt 0 ]\nthen\necho \"Pushing deployment ${deployment_id} with changes [${deployment_changes[@]}]\"\n./pulse-event-cli push deployment \\\n--api-key \"${CREDENTIALS}\" \\\n--identifier \"${deployment_id}\" \\\n--timestamp \"${deployment_date}\" \\\n${deployment_changes[@]}\n\nfor deployment_change in \"${deployment_changes[@]}\"\ndo\ndeployment_change_date=$(git log --format=\"%at\" ${deployment_change} --max-count=1)\n\necho \"Pushing changes ${deployment_change} with date ${deployment_change_date}\"\n./pulse-event-cli push change \\\n--api-key \"${CREDENTIALS}\" \\\n--identifier \"${deployment_change}\" \\\n--timestamp \"${deployment_change_date}\"\ndone\nfi\n\nprevious_deployment=\"${deployment_sha}\"\nfi\ndone\n</code></pre>"},{"location":"cli/examples/#pushing-historic-incidents","title":"Pushing historic incidents","text":"<p>In this example, we used the Pulse CLI to push past incidents from the Codacy status page API into Pulse.</p> <pre><code># incidents.py\n\nimport requests\nimport subprocess\nfrom datetime import datetime, timezone\n\nurl = 'https://status.codacy.com/api/incidents'\n\nresp = requests.get(url=url)\ndata = resp.json()\n\ndef convert_to_unix_epoch(date_time_str):\n    return str(int(datetime.strptime(date_time_str, '%Y-%m-%dT%H:%M:%S.%fZ').replace(tzinfo=timezone.utc).timestamp()))\n\nfor incident in data:\n    id = incident['incidentID']\n    created = convert_to_unix_epoch(incident['createdAt'])\n    updated = convert_to_unix_epoch(incident['updatedAt'])\n\n    if incident['status'] == 'Resolved':\n        print(f'Pushing incident {id} created in {created} and resolved at {updated}')\n        print(created)\n        print(updated)\n        bashCmd = [\"./pulse-event-cli\", \"push\", \"incident\",\n        \"--api-key\", \"xxx\",\n        \"--identifier\", id,\n        \"--timestampCreated\", created,\n        \"--timestampResolved\", updated\n        ]\n        process = subprocess.Popen(bashCmd, stdout=subprocess.PIPE)\n        output, error = process.communicate()\n    else:\n        print(f\"Skipping incident {id} because it was not resolved\")\n</code></pre>"},{"location":"metrics/accelerate-changes/","title":"Changes and reviews metrics","text":"<p>Changes and reviews metrics provide an extra level of detail about the performance of your team workflows.</p> <p>Important</p> <p>You must install the GitHub integration or the Bitbucket integration for Pulse to calculate the changes and reviews metrics.</p>"},{"location":"metrics/accelerate-changes/#changes-metrics","title":"Changes metrics","text":"<p>The following metrics directly influence Lead time for changes, and can help you track in more detail what needs to be improved in your workflow:</p> <ul> <li>Time to open</li> <li>Time to merge</li> </ul> <p>Pulse aggregates these metrics by week and presents values for the average and the 75% and 95% percentiles.</p> <p>Note</p> <p>Pulse calculates these metrics based on pull request data and:</p> <ul> <li>Includes pull requests targeting all branches</li> <li>Includes draft pull requests, meaning that the lifetime of pull requests includes the time marked as draft</li> <li>Excludes open and declined pull requests</li> <li>Excludes pull requests without commits and force pushed pull requests where the first commit was authored after the pull request was open</li> </ul>"},{"location":"metrics/accelerate-changes/#time-to-open","title":"Time to open","text":"<p>An approximation of how long it takes for a change or feature to be developed:</p> <pre><code>pull request open timestamp - first commit in pull request branch timestamp\n</code></pre>"},{"location":"metrics/accelerate-changes/#time-to-merge","title":"Time to merge","text":"<p>How long does the code review process take for a change or feature:</p> <pre><code>pull request merge timestamp - pull request open timestamp\n</code></pre>"},{"location":"metrics/accelerate-changes/#reviews-metrics","title":"Reviews metrics","text":"<p>The following metrics provide insights into the level of engagement and efficiency of your code review process:</p> <ul> <li>Time to first review</li> <li>Time to first approval</li> <li>Time from first to last approval</li> <li>Time from last approval to merge</li> <li>Outlier review details</li> </ul> <p>Note</p> <p>Pulse calculates these metrics based on pull request data and:</p> <ul> <li>Considers that reviews are approvals, change requests, and inline pull request comments, but not pull request conversation comments</li> <li>Excludes reviews in a pending state</li> <li>Excludes reviews and approvals that are done after the pull requests are merged</li> </ul>"},{"location":"metrics/accelerate-changes/#time-to-first-review","title":"Time to first review","text":"<p>How long does it take to have the first review on a pull request:</p> <pre><code>first review timestamp - pull request open timestamp\n</code></pre>"},{"location":"metrics/accelerate-changes/#time-to-first-approval","title":"Time to first approval","text":"<p>How long does it take to have the first approval on a pull request:</p> <pre><code>first approval timestamp - pull request open timestamp\n</code></pre>"},{"location":"metrics/accelerate-changes/#time-from-first-to-last-approval","title":"Time from first to last approval","text":"<p>How long does it take between the first and last approvals on a pull request:</p> <pre><code>last approval timestamp - first approval timestamp\n</code></pre>"},{"location":"metrics/accelerate-changes/#time-from-last-approval-to-merge","title":"Time from last approval to merge","text":"<p>How long does it take to merge a pull request after the last approval:</p> <pre><code>pull request merge timestamp - last approval timestamp\n</code></pre>"},{"location":"metrics/accelerate-changes/#outlier-review-details","title":"Outlier review details","text":"<p>Pulse displays the following details for each pull request in the chart Review time explorer:</p> Name Description Time to review Time to merge a pull request Changes Number of lines of code changed in a pull request Commits Number of commits in a pull request, even if the pull request is squashed Comments Number of comments and review comments in a pull request"},{"location":"metrics/accelerate-changes/#see-also","title":"See also","text":"<ul> <li>Report data to Pulse using the GitHub integration or the Bitbucket integration</li> </ul>"},{"location":"metrics/accelerate-wip/","title":"Work in progress metrics","text":"<p>Pulse calculates the work in progress metrics based on the status of all pull requests targeting any base branch in your repositories.</p> <p>Important</p> <p>You must install the GitHub integration or the Bitbucket integration for Pulse to calculate the work in progress metrics.</p>"},{"location":"metrics/accelerate-wip/#work-in-progress","title":"Work in progress","text":"<p>To provide you with an high-level view of the current work in progress of your teams, Pulse groups pull requests that are currently open by the following phases:</p> <ul> <li>Open: the pull request is open but the team hasn't reviewed it.</li> <li>Reviewed: the pull request received at least one review but it isn't approved yet. These reviews include change requests and inline pull request comments, but don't include conversation comments.</li> <li>Approved: the pull request received at least one approval.</li> </ul>"},{"location":"metrics/accelerate-wip/#work-in-progress-details","title":"Work in progress details","text":"<p>The following metrics for each open pull request allow you to understand which work items are about to become or have become blockers and may need an action to move forward:</p> <ul> <li>Time in progress: time since that pull request is in progress.</li> <li>Phase: current phase of the pull request, can be one of Open, Reviewed, or Approved.</li> <li>Reviews: number of reviews of the pull request. Reviews include approvals, change requests, and inline pull request comments, but don't include conversation comments.</li> <li>Comments: number of comments of the pull request. Comments include inline pull request comments and conversation comments.</li> <li>Time stale: number of days since the pull request had the last interaction.</li> <li>Changes: number of lines of code changed by the pull request.</li> </ul>"},{"location":"metrics/accelerate-wip/#see-also","title":"See also","text":"<ul> <li>Report data to Pulse using the GitHub integration or the Bitbucket integration</li> </ul>"},{"location":"metrics/accelerate/","title":"Accelerate metrics","text":"<p>Pulse calculates the four key Accelerate metrics based on changes, deployments, and incidents data for a rolling window of the last 90 days:</p> <ul> <li>Deployment frequency</li> <li>Lead time for changes</li> <li>Time to recover</li> <li>Change failure rate</li> </ul>"},{"location":"metrics/accelerate/#deployment-frequency","title":"Deployment frequency","text":"<p>How often your organization completes a deployment to production or releases code to end-users of your primary application or service:</p> <pre><code>number of deployments per day\n</code></pre> <p>Pulse uses the average value over a period of time to display aggregate deployment frequencies.</p> <p>Note</p> <p>Due to the way Pulse calculates deployment frequency, the absence of data will have an impact on reducing the value of this metric.</p> <p>For example, suppose that you started developing a project 3 months ago and your deployment frequency over this time period was 2 deployments/day. If you increase the observed time interval to 6 months to include a time period before there were deployments, Pulse displays a deployment frequency of only 1 deployment/day.</p> <p>Pulse determines your performance level for this metric as follows:</p> Performance level1 Deployment frequency Elite More than 50% of days have one or more deployments High More than 50% of months have at least one deployment Medium More than 50% of semesters have at least one deployment Low Less than 50% of semesters have at least one deployment"},{"location":"metrics/accelerate/#lead-time-for-changes","title":"Lead time for changes","text":"<p>How long it takes a commit to get into production on your primary application or service:</p> <pre><code>median(deployment timestamp - changes timestamp)\n</code></pre> <p>Note</p> <p>The changes timestamp is when code is actually checked into a repository.</p> <p>Pulse uses the maximum value over a period of time to display aggregate lead time for changes.</p> <p>Pulse determines your performance level for this metric as follows:</p> Performance level1 Lead time for changes Elite Less than 1 hour High Between 1 hour and 1 week Medium Between 1 week and 6 months Low More than or equal to 6 months"},{"location":"metrics/accelerate/#time-to-recover","title":"Time to recover","text":"<p>How long it takes your organization to recover from a failure in production (for example, service impairment or unplanned outage):</p> <pre><code>average(incident resolved timestamp - incident created timestamp)\n</code></pre> <p>Pulse uses the maximum value over a period of time to display aggregate times to recover.</p> <p>Note</p> <ul> <li> <p>Pulse first calculates the performance metrics per system, and later aggregates the metrics by time interval when displaying them.</p> <p>This means that you must report deployments and incidents associated with the correct systems for Pulse to calculate the metrics correctly. Otherwise, even if you're reporting incident events, the charts will be empty.</p> <p>If you are reporting incidents using GitHub or Bitbucket integrations, Pulse automatically associates your deployments and incidents with the correct systems.</p> </li> </ul> <p>Pulse determines your performance level for this metric as follows:</p> Performance level1 Time to recover Elite Less than 1 hour High Less than 1 day Medium Less than 1 week Low More than or equal to 1 week"},{"location":"metrics/accelerate/#change-failure-rate","title":"Change failure rate","text":"<p>Percentage of deployments causing a failure in production (for example, service impairment or unplanned outage) and that subsequently require remediation:</p> <pre><code>number of deployments that caused incidents / total number of deployments\n</code></pre> <p>Pulse uses the average value over a period of time to display aggregate change failure rates.</p> <p>Note</p> <ul> <li> <p>Pulse first calculates the performance metrics per system, and later aggregates the metrics by time interval when displaying them.</p> <p>This means that you must report deployments and incidents associated with the correct systems for Pulse to calculate the metrics correctly. Otherwise, even if you're reporting incident events, the charts will be empty.</p> <p>If you are reporting incidents using GitHub or Bitbucket integrations, Pulse automatically associates your deployments and incidents with the correct systems.</p> </li> <li> <p>Pulse considers that the deployment causing each incident is the last deployment before the incident, within the same system. The same deployment may be associated with multiple incidents.</p> <p>This simplification reduces the complexity of the integration because it doesn't require any information about deployments or changes when reporting incidents, which could originate from a different data source.</p> </li> </ul> <p>Pulse determines your performance level for this metric as follows:</p> Performance level1 Change failure rate Elite 0-15% High 15-30% Medium N/A2 Low 30-100%"},{"location":"metrics/accelerate/#see-also","title":"See also","text":"<p>Report data to Pulse using the following integrations:</p> <ul> <li>GitHub integration or Bitbucket integration</li> <li>Jira integration or PagerDuty integration</li> <li>Pulse CLI</li> </ul> <ol> <li> <p>Performance levels are based on the Accelerate State of DevOps 2021 report.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>The Accelerate State of DevOps 2021 report defines the same range of values for both Medium and Low performance levels, so we've opted to skip the Medium level.\u00a0\u21a9</p> </li> </ol>"},{"location":"metrics/lead-cycle-time/","title":"Lead and cycle time metrics","text":"<p>Monitoring you team's lead time and cycle time allows you to understand if you're improving the ability to deliver value to customers. These productivity metrics indicate how long it takes for work to flow through the software development process:</p> <ul> <li>Lead time: the time it takes to go from a customer making a request to the request being satisfied. You can use lead time as an indication of your organization\u2019s time to market.</li> <li>Cycle time: the time it takes for your team to complete work items once they begin actively working on them.</li> </ul> <p></p> <p>Use these metrics to monitor the results of investing in DevOps practices and tackling technical debt, compare, and quantify the performance of your teams. These metrics enable you to objectively communicate to stakeholders how long your Engineering team takes to address customer requests or defects.</p> <p>Read more on how you can improve your time to market.</p> <p>Note</p> <p>Pulse calculates lead time and cycle time based on the state changes of issues that are already closed in Jira, independently of the resolution. This means that:</p> <ul> <li> <p>If you reopen a completed issue, Pulse stops considering the issue while calculating the metrics. If the issue is completed again, Pulse takes into account the last completed timestamp.</p> </li> <li> <p>If you change the type or the project of a completed issue, Pulse reflects the change on the dashboards, transitioning the issue history to the new project if relevant.</p> <p>Note that this change doesn't affect the overall calculation of the lead time or cycle time metrics.</p> </li> </ul>"},{"location":"metrics/lead-cycle-time/#lead-time","title":"Lead time","text":"<p>Time between creating an issue in the backlog and completing the issue.</p> <p>Pulse calculates lead time for completed issues, taking into account that issues can transition from Completed back to another status.</p> <pre><code>last issue completed timestamp - issue created timestamp\n</code></pre>"},{"location":"metrics/lead-cycle-time/#cycle-time","title":"Cycle time","text":"<p>Time between commiting to work on an issue (such as at the start of a sprint) and completing the issue. Cycle time is a subpart of lead time.</p> <p>Pulse calculates cycle time for completed issues, taking into account that issues can transition from In progress back to another status besides Completed.</p> <p>Note</p> <p>When calculating cycle time, Pulse considers that:</p> <ul> <li>Issues are in progress when they transition to any Jira status belonging to the In Progress status category (represented by the blue color in Jira).</li> <li>Issues that have a status belonging to the To Do status category (represented by the grey color in Jira) don't contribute to cycle time.</li> </ul> <pre><code>sum all (issue exited in progress timestamp - issue entered in progress timestamp)\n</code></pre>"},{"location":"metrics/lead-cycle-time/#see-also","title":"See also","text":"<ul> <li>Report data to Pulse using the Jira integration</li> </ul>"},{"location":"one-click-integrations/bitbucket-integration/","title":"Bitbucket integration","text":"<p>Pulse integrates with Bitbucket Cloud to receive data about changes, deployments, and incidents, necessary to calculate the Accelerate metrics:</p> <ul> <li> <p>Deployment frequency</p> </li> <li> <p>Lead time for changes, including the following drill-down metrics:</p> <ul> <li> <p>Changes metrics</p> </li> <li> <p>Reviews metrics</p> </li> <li> <p>Work in progress metrics</p> </li> </ul> </li> <li> <p>Time to recover</p> </li> <li> <p>Change failure rate</p> </li> </ul>"},{"location":"one-click-integrations/bitbucket-integration/#setting-up-the-bitbucket-integration","title":"Setting up the Bitbucket integration","text":"<p>Note</p> <ul> <li>The Bitbucket integration connects to a specific workspace. You must be the owner of that Bitbucket workspace to proceed with the integration setup.</li> <li>See below the permissions that Pulse requires from your Bitbucket account.  </li> </ul> <p>To set up the Bitbucket integration:</p> <ol> <li> <p>On Pulse, expand Integrations and select Bitbucket.</p> </li> <li> <p>Click Install Bitbucket App.</p> <p></p> </li> <li> <p>Confirm that Pulse successfully connected the integration to Bitbucket. If there is an error please contact support.</p> <p></p> </li> <li> <p>Choose the workspace that you want to connect the integration to. You can only select a workspace where you have owner permissions.</p> <p></p> </li> <li> <p>Choose the strategy to detect incidents that best fits your workflows. See the section below for a detailed description of each option.</p> <p></p> </li> <li> <p>Click Complete setup.</p> </li> </ol> <p>Your Bitbucket integration is now complete. Pulse will start loading your data for the last 90 days.</p> <p></p>"},{"location":"one-click-integrations/bitbucket-integration/#deployment-detection-merged-pr","title":"Automatic deployment detection using merged pull requests","text":"<p>Note</p> <ul> <li>Pulse uses your merged pull requests to automatically detect your deployments. Other strategies to detect deployments will be available with a future version of Pulse.</li> <li>If you use a squash merge strategy when merging the pull request, Pulse may produce inaccurate accelerate metrics.</li> </ul> <ul> <li> <p>Pulse considers a deployment every merged pull request that targets the default branch of the repository.</p> </li> <li> <p>The deployment date is the timestamp when the corresponding pull request is merged.</p> </li> <li> <p>The set of changes in a deployment is the list of commits in the corresponding pull request.</p> </li> <li> <p>Pulse associates all the Bitbucket user groups of the author of a merged pull request with the corresponding deployment, excluding the user groups with less than two members. Pulse only takes the changes to Bitbucket user groups into account on pull requests merged after those changes.</p> </li> </ul>"},{"location":"one-click-integrations/bitbucket-integration/#incident-detection-strategy","title":"Automatic incident detection strategies","text":"<p>The Pulse Bitbucket integration can detect incidents automatically using the following strategies:</p> <ul> <li>Pull request reverts</li> <li>Pull request naming convention</li> </ul> <p>You can also choose not to detect incidents via Bitbucket.</p>"},{"location":"one-click-integrations/bitbucket-integration/#bb-incident-pr-revert","title":"Use pull request reverts (based on default branch)","text":"<ul> <li> <p>Pulse bases incident detection on pull request reverts.</p> </li> <li> <p>Pulse considers an incident any pull request that targets the default branch of the repository merged from a branch whose name starts with <code>revert-pr-</code>, getting the number of the reverted pull request from the branch name, <code>revert-pr-&lt;pull request number&gt;</code>. If you change the name of the branch created by Bitbucket when you revert a pull request, Pulse may not be able to obtain the incident data correctly.</p> </li> <li> <p>The incident creation date is the timestamp when the reverted pull request was initially merged. If Pulse can't get the reverted pull request number from the branch name, the incident creation date is the timestamp of the first commit to the incident pull request.</p> </li> <li> <p>Pulse associates incidents to the system matching the repository name.</p> </li> </ul>"},{"location":"one-click-integrations/bitbucket-integration/#bb-incident-naming","title":"Use pull request naming convention (based on default branch)","text":"<ul> <li> <p>Pulse applies the same mechanism to detect incidents used for the pull request reverts strategy. However, instead of considering branches whose name starts with <code>revert-pr-</code>, Pulse uses the prefix that you define for the branch name or the pull request title to match the naming convention of your workflow.</p> <p></p> </li> <li> <p>Your prefix must have 2 to 50 characters. For a branch name, your prefix can't contain spaces or special characters, such as <code>~ ^ : ? * [</code>. See the Git reference for further details.</p> </li> </ul>"},{"location":"one-click-integrations/bitbucket-integration/#bb-incident-not-detect","title":"Don't detect incidents via Bitbucket","text":"<ul> <li> <p>Pulse doesn't detect incidents automatically using Bitbucket events.</p> <p>Choose this option if you want to send to Pulse the information about your incidents using another Pulse integration - Jira one-click integration, PagerDuty one-click integration, Pulse CLI, or Ingestion API - or if you don't want Pulse to track incidents data.</p> </li> </ul>"},{"location":"one-click-integrations/bitbucket-integration/#collected-data","title":"Collected data","text":"<p>The table below lists the data that the Bitbucket integration collects from your Bitbucket workspace, together with:</p> <ul> <li>The mapping between the data collected from Bitbucket and the Pulse data model</li> <li>The metrics that Pulse displays on the dashboards, calculated using the collected data</li> </ul> Data collected from Bitbucket Mapping to Pulse data model Used in Pull request commits <p>Changes:</p> <ul> <li><code>change_id</code>: commit UUID</li> <li><code>time_created</code>: commit author date1</li> <li><code>system</code>: repository name</li> </ul> Lead time for changes on the Accelerate Overview dashboard Pull requests <p>Deployments:</p> <ul> <li><code>deploy_id</code>: unique pull request identifier</li> <li><code>timestamp_created</code>: merge date of the pull request</li> <li><code>system</code>: repository name</li> </ul> Deployment frequency and Change failure rate on the Accelerate Overview dashboard Pull requests <p>Incidents:</p> <ul> <li><code>incident_id</code>: pull request number</li> <li><code>timestamp_created</code>: merge date of the reverted pull request</li> <li><code>timestamp_resolved</code>: merge date of the pull request</li> <li><code>system</code>: repository name</li> </ul> Time to recover and Change failure rate on the Accelerate Overview dashboard Pull requests          -      Changes &amp; Reviews dashboard,Work in Progress dashboard User groups <p>Deployments:</p> <ul> <li><code>teams</code>: Bitbucket user groups of the author of a deployment2</li> </ul> Filters the Accelerate Overview dashboard, Changes &amp; Reviews dashboard, and Work in Progress dashboard by the contributions made by the team <p>1: Pulse uses the commit author's date since it's more accurate. The committer date can be changed (for example, with a fast-forward) and stop reflecting the real creation date of the change.</p> <p>2: Adding a new user group or changing the composition of a user group on Bitbucket only affects new data starting from that moment and doesn't have an immediate impact on the dashboards. Also, deleted user groups on Bitbucket are still visible in Pulse.</p>"},{"location":"one-click-integrations/bitbucket-integration/#bb-permissions","title":"Which permissions does Pulse need from Bitbucket?","text":"<p>Pulse requests only the necessary permissions/scopes from Bitbucket to collect changes and deployment data from the repositories in your workspace and keeps your information secure. See below the detailed list of permissions.</p> Scope and permissions Description <code>account</code> Pulse retrieves the email of the user installing the integration, the user's workspaces and its membership, and the user groups. <code>repository</code> Pulse retrieves repository information to get the default branch and the list of commits. <code>pullrequest</code> Pulse retrieves pull request information to calculate several metrics presented on the dashboards. See the details here. <code>webhook</code> Pulse creates webhooks to track new or deleted workspaces.       Pulse creates webhooks subscribed to the following events as a trigger to gather the corresponding data in real time:       <ul> <li><code>pullrequest:created</code>: pull requests creation</li> <li><code>pullrequest:updated</code>: pull requests edition</li> <li><code>pullrequest:fulfilled</code>: pull requests merge</li> <li><code>pullrequest:rejected</code>: pull requests decline</li> <li><code>pullrequest:approved</code>: pull requests approval</li> <li><code>pullrequest:unapproved</code>: deletion of pull requests approval</li> <li><code>pullrequest:changes_request_created</code>: pull requests change request</li> <li><code>pullrequest:changes_request_removed</code>: deletion of pull requests change request</li> <li><code>repo:push</code>: pushes of tags to a repository</li> </ul>       Pulse creates webhooks subscribed to the following events as a trigger to historical data import:       <ul> <li><code>repo:transfer</code>: repositories tranfer acceptance</li> <li><code>repo:fork</code>: repositories fork</li> </ul>"},{"location":"one-click-integrations/bitbucket-integration/#see-also","title":"See also","text":"<ul> <li>Accelerate metrics</li> <li>Changes and reviews metrics</li> <li>Work in progress metrics</li> </ul>"},{"location":"one-click-integrations/github-integration/","title":"GitHub integration","text":"<p>Pulse integrates with GitHub Cloud to receive data about changes, deployments, and incidents, necessary to calculate the metrics:</p> <ul> <li> <p>Deployment frequency</p> </li> <li> <p>Lead time for changes, including the following drill-down metrics:</p> <ul> <li> <p>Changes metrics</p> </li> <li> <p>Reviews metrics</p> </li> <li> <p>Work in progress metrics</p> </li> </ul> </li> <li> <p>Time to recover</p> </li> <li> <p>Change failure rate</p> </li> </ul>"},{"location":"one-click-integrations/github-integration/#setting-up-the-github-integration","title":"Setting up the GitHub integration","text":"<p>Note</p> <ul> <li>You can only install the Pulse GitHub App on an organization and not on your personal account.</li> <li>See below the permissions that Pulse requires from your GitHub account.</li> </ul> <p>To set up the GitHub integration:</p> <ol> <li> <p>On Pulse, expand Integrations and select GitHub.</p> </li> <li> <p>Click Install GitHub App and follow the instructions on the GitHub UI to install the app on your organization.</p> <p></p> </li> <li> <p>Confirm that Pulse successfully installed the GitHub app and created the webhook on GitHub. If there is an error please contact support.</p> <p></p> </li> <li> <p>Choose the strategy to detect deployments that best fits your workflows. See the section below for a detailed description of each option.</p> <p></p> </li> <li> <p>Choose the strategy to detect incidents that best fits your workflows. See the section below for a detailed description of each option.</p> <p>Note</p> <p>Pulse can only detect incidents automatically from GitHub if you configure the deployment detection strategy to use merged pull requests.</p> <p></p> </li> <li> <p>Click Complete setup.</p> </li> </ol> <p>Your GitHub integration is now complete. Pulse will start loading your data for the last 90 days.</p> <p></p>"},{"location":"one-click-integrations/github-integration/#deployment-detection-strategy","title":"Automatic deployment detection strategies","text":"<p>The Pulse GitHub integration can detect deployments automatically using the following strategies:</p> <ul> <li>Merged pull requests</li> <li>Semantic versioning tags</li> </ul> <p>You can also choose not to detect deployment automatically via GitHub and send your data to Pulse using the CLI or the API.</p>"},{"location":"one-click-integrations/github-integration/#gh-deploy-merged-pr","title":"Use merged pull requests (based on default branch)","text":"<ul> <li> <p>Pulse considers a deployment every merged pull request that targets the default branch of the repository.</p> </li> <li> <p>The deployment date is the timestamp when the corresponding pull request is merged.</p> </li> <li> <p>The set of changes in a deployment is the list of commits in the corresponding pull request. Pulse correctly tracks your changes even if you squash or rebase the commits when merging the pull request, since Pulse processes all the original commits before any changes to the Git history.</p> </li> <li> <p>Pulse associates all GitHub teams of the author of a merged pull request with the corresponding deployment, excluding teams with less than two members. Pulse only takes changes to GitHub teams into account on pull requests merged after those changes.</p> </li> </ul>"},{"location":"one-click-integrations/github-integration/#gh-deploy-semver","title":"Use semantic versioning tags","text":"<ul> <li> <p>Pulse considers a deployment every Git tag that follows the SemVer convention, excluding pre-release versions but allowing release prefixes. For example, the following are valid tags: <code>1.0.0</code>, <code>v2.3.4</code>.</p> <p>To use this strategy, make sure that you're creating Git tags on your repositories for each successful deployment to production, or whenever you make a new release available to any user of your application:</p> <pre><code>git tag -a MAJOR.MINOR.PATCH -m \"&lt;Deployment or release message&gt;\"\n</code></pre> <p>Where <code>MAJOR.MINOR.PATCH</code> must be a valid SemVer version without pre-release information. Check if your versioning syntax is valid.</p> </li> <li> <p>The deployment date is either the creation date of annotated tags or the timestamp when Pulse receives the webhook calls for lightweight tags.</p> <p>Keep in mind that since webhook calls can be delayed, the deployment date on Pulse could be imprecise and impact the metric Lead time for changes.</p> </li> <li> <p>The set of changes that belong to a deployment is the list of commits between the tag of that deployment and the previous tag. Because of this, Pulse discards:</p> <ul> <li>The first SemVer tag in the repository since there is no previous tag to compare with.</li> <li>Any tag that doesn't have a common ancestor (commit) with its previous tag, since Pulse can't obtain the changes between them.</li> </ul> </li> <li> <p>Pulse associates all GitHub teams of the person who creates a Git tag with the corresponding deployment, excluding teams with less than two members. Pulse only takes changes to GitHub teams into account on Git tags created after those changes.</p> </li> </ul>"},{"location":"one-click-integrations/github-integration/#gh-deploy-cli-api","title":"Use the CLI or API (don't detect deployments automatically)","text":"<ul> <li> <p>Pulse doesn't detect deployments automatically using GitHub events.</p> <p>This is useful if none of the automatic deployment detection strategies match your workflow and you must have control over the way Pulse tracks your deployments.</p> </li> <li> <p>In this case, you must send to Pulse the information about your deployments and the corresponding changes using the Pulse CLI or the Ingestion API.</p> </li> </ul>"},{"location":"one-click-integrations/github-integration/#incident-detection-strategy","title":"Automatic incident detection strategies","text":"<p>The Pulse GitHub integration can detect incidents automatically using the following strategies:</p> <ul> <li>Pull request reverts</li> <li>Pull request naming convention</li> </ul> <p>You can also choose not to detect incidents via GitHub.</p> <p>Note</p> <p>Pulse uses pull requests to detect incidents. Thus, Pulse can only detect incidents automatically from GitHub if you configure the deployment detection strategy to use merged pull requests.</p>"},{"location":"one-click-integrations/github-integration/#gh-incident-pr-revert","title":"Use pull request reverts (based on default branch)","text":"<ul> <li> <p>Pulse bases incident detection on pull request reverts.</p> </li> <li> <p>Pulse considers an incident any pull request that targets the default branch of the repository merged from a branch whose name starts with <code>revert-</code>, getting the number of the reverted pull request from the branch name, <code>revert-&lt;pull request number&gt;</code>. If you change the name of the branch created by GitHub when you revert a pull request, Pulse may not be able to obtain the incident data correctly.</p> </li> <li> <p>The incident creation date is the timestamp when the reverted pull request was initially merged. If Pulse can't get the reverted pull request number from the branch name, the incident creation date is the timestamp of the first commit to the incident pull request.</p> </li> <li> <p>Pulse associates incidents to the system matching the repository name.</p> </li> </ul>"},{"location":"one-click-integrations/github-integration/#gh-incident-naming","title":"Use pull request naming convention (based on default branch)","text":"<ul> <li> <p>Pulse applies the same mechanism to detect incidents used for the pull request reverts strategy. However, instead of considering branches whose name starts with <code>revert-</code>, Pulse uses the prefix that you define for the branch name or the pull request title to match the naming convention of your workflow.</p> <p></p> </li> <li> <p>Your prefix must have 2 to 50 characters. For a branch name, your prefix can't contain spaces or special characters, such as <code>~ ^ : ? * [</code>. See the Git reference for further details.</p> </li> </ul>"},{"location":"one-click-integrations/github-integration/#gh-incident-not-detect","title":"Don't detect incidents via GitHub","text":"<ul> <li> <p>Pulse doesn't detect incidents automatically using GitHub events.</p> <p>Choose this option if you want to send to Pulse the information about your incidents using another Pulse integration - Jira one-click integration, PagerDuty one-click integration, Pulse CLI, or Ingestion API - or if you don't want Pulse to track incidents data.</p> </li> </ul>"},{"location":"one-click-integrations/github-integration/#collected-data","title":"Collected data","text":"<p>The table below lists the data that the GitHub integration collects from your GitHub organization, together with:</p> <ul> <li>The mapping between the data collected from GitHub and the Pulse data model</li> <li>The metrics that Pulse displays on the dashboards, calculated using the collected data</li> </ul> Data collected from GitHub Mapping to Pulse data model Used in Pull request commits <p>Changes:</p> <ul> <li><code>change_id</code>: commit UUID</li> <li><code>time_created</code>: commit author date1</li> <li><code>system</code>: repository name</li> </ul> Lead time for changes on the Accelerate Overview dashboard Pull requests, git tags, or none (configurable) <p>Deployments:</p> <ul> <li><code>deploy_id</code>: pull request identifier</li> <li><code>timestamp_created</code>: merge date of the pull request</li> <li><code>system</code>: repository name</li> </ul> Deployment frequency and Change failure rate on the Accelerate Overview dashboard Pull requests <p>Incidents:</p> <ul> <li><code>incident_id</code>: pull request identifier</li> <li><code>timestamp_created</code>: merge date of the reverted pull request</li> <li><code>timestamp_resolved</code>: merge date of the pull request</li> <li><code>system</code>: repository name</li> </ul> Time to recover and Change failure rate on the Accelerate Overview dashboard Pull requests          -      Changes &amp; Reviews dashboard,Work in Progress dashboard Teams <p>Deployments:</p> <ul> <li><code>teams</code>: GitHub teams of the author of a deployment2</li> </ul> Filters the Accelerate Overview dashboard, Changes &amp; Reviews dashboard, and Work in Progress dashboard by the contributions made by the team <p>1: Pulse uses the commit author's date since it's more accurate. The committer date can be changed (for example, with a rebase) and stop reflecting the real creation date of the change.</p> <p>2: Adding a new team or changing the composition of a team on GitHub only affects new data starting from that moment and doesn't have an immediate impact on the dashboards. Also, deleted teams on GitHub are still visible in Pulse.</p>"},{"location":"one-click-integrations/github-integration/#gh-permissions","title":"Which permissions does Pulse need from GitHub?","text":"<p>Pulse requests only the necessary permissions from GitHub to collect changes and deployment data from the repositories in your organization and keeps your information secure. See below the detailed list of permissions.</p> Scope Permissions Description Repository permissions: Pull requests Read Pulse retrieves pull request information to calculate several metrics presented on the dashboards. See the details here. Contents Read Pulse retrieves tag information to track deployments via semantic versioning tags. For this, the Pulse GitHub App requires read permission on the contents of files and directories, as it's the same permission that applies to tags. Issues Read Pulse retrieves issue information to get the top-level comments of pull requests. Organization permissions: Webhooks Read &amp; Write Pulse creates organization webhooks to track new or deleted repositories, and the status of the integration.Pulse also creates webhooks subscribed to the following repository events as a trigger to gather the corresponding data in real time:       <ul> <li><code>create</code>: tags creation</li> <li><code>pull_request</code>: pull requests creation, edition, and deletion</li> <li><code>pull_request_review</code>: review creation, edition, and deletion</li> </ul> Members Read Pulse retrieves information about members and teams of your organization to filter metrics and for billing purposes."},{"location":"one-click-integrations/github-integration/#see-also","title":"See also","text":"<ul> <li>Accelerate metrics</li> <li>Changes and reviews metrics</li> <li>Work in progress metrics</li> </ul>"},{"location":"one-click-integrations/jira-integration/","title":"Jira integration","text":"<p>Pulse integrates with Jira Cloud to receive data about:</p> <ul> <li> <p>Issues - necessary to calculate Lead time and Cycle time.</p> </li> <li> <p>Incidents - necessary to calculate the following Accelerate metrics:</p> <ul> <li> <p>Time to recover</p> </li> <li> <p>Change failure rate</p> </li> </ul> </li> </ul>"},{"location":"one-click-integrations/jira-integration/#setting-up-the-jira-integration","title":"Setting up the Jira integration","text":"<p>Note</p> <ul> <li>A Jira administrator must set up the integration, as Pulse will only have access to Jira resources that the user setting up the integration has access to.</li> <li>You can only integrate one Pulse organization with each Jira instance.</li> <li>If you want to report incidents using Jira, review the details of the incident detection strategy before you proceed with the integration setup.</li> <li>See below the permissions that Pulse requires from your Jira instance.</li> </ul> <p>To set up the Jira integration:</p> <ol> <li> <p>On Pulse, expand Integrations and select Jira.</p> </li> <li> <p>Click Install Jira App and follow the instructions on the Jira UI to install the app. You must be a Jira administrator to proceed with this step.</p> <p></p> </li> <li> <p>Confirm that Pulse successfully connected the integration to Jira. If there is an error please contact support.</p> <p></p> </li> <li> <p>Choose the strategy to detect incidents that best fits your workflows. See the section below for a detailed description of each option.</p> <p></p> </li> <li> <p>Click Complete setup.</p> </li> </ol> <p>Your Jira integration is now complete. Pulse will start loading your data for the last 90 days.</p> <p></p>"},{"location":"one-click-integrations/jira-integration/#incident-detection-strategy","title":"Automatic incident detection strategies","text":"<p>The Pulse Jira integration can detect incidents automatically using the issues assigned with the label <code>Incident</code>.</p> <p>You can also choose not to detect incidents via Jira.</p>"},{"location":"one-click-integrations/jira-integration/#jira-incident-label","title":"Use issues assigned with the label \"Incident\"","text":"<ul> <li> <p>Pulse considers an incident every Jira issue in a Done status assigned with the label <code>Incident</code> (case-insensitive). Done status in Jira are all the status of an issue under the Done category (represented by the green color in Jira). Some examples are DONE, CLOSED, or DECLINED, but other values can be defined.</p> </li> <li> <p>Pulse associates an incident to one or more systems matching the values in the Component(s) field of the Jira issue (case-sensitive).</p> <ul> <li> <p>If the Jira issue is set with more than one component, Pulse creates an incident for each existing system that matches a component name, ignoring the remaining components that don't exist in Pulse as a system.</p> </li> <li> <p>If the Component(s) field in the Jira issue is empty, or none of the components exist in Pulse as a system, Pulse creates an incident and associates it with the system <code>_unknown_</code>.</p> </li> </ul> </li> <li> <p>The incident creation date is the timestamp when the Jira issue was created, while the incident resolution date is the timestamp when the Jira issue was last updated to a Done status.</p> </li> <li> <p>Pulse creates new incidents when the following updates are performed in Jira:</p> <ul> <li> <p>The status of an issue assigned with the label <code>Incident</code> is updated to a Done status. Pulse creates one or more incidents, depending on the values in the Component(s) field.</p> </li> <li> <p>An issue in a Done status is assigned with the label <code>Incident</code>. Pulse creates one or more incidents, depending on the values in the Component(s) field.</p> </li> <li> <p>A new component that matches an existing system is added to an issue in a Done status assigned with the label <code>Incident</code>. Pulse creates a new incident associated with the matching system.</p> </li> </ul> </li> <li> <p>Pulse deletes an existing incident when the following updates are performed in Jira:</p> <ul> <li> <p>The corresponding issue is re-opened.</p> </li> <li> <p>The label <code>Incident</code> is removed from the corresponding issue.</p> </li> <li> <p>A component that matches an existing system is removed from the corresponding issue. Pulse deletes the incident for that system.</p> </li> <li> <p>The corresponding issue is deleted.</p> </li> </ul> </li> </ul> <p>Important</p> <p>After completing the Jira integration setup, Pulse starts loading your incident data for the last 90 days. Therefore, before you perform the integration setup, make sure the corresponding Jira issues follow the rules described above, so Pulse can load your historical data correctly. Pulse will only create incidents for the Jira issues in a Done status that are assigned with the label <code>Incident</code>, and associates them with the systems matching the values in the Component(s) field as described above.</p>"},{"location":"one-click-integrations/jira-integration/#jira-incident-not-detect","title":"Don't detect incidents via Jira","text":"<ul> <li> <p>Pulse doesn't detect incidents automatically using Jira events.</p> <p>Choose this option if you want to send to Pulse the information about your incidents using another Pulse integration - GitHub one-click integration or Bitbucket one-click integration, PagerDuty one-click integration, Pulse CLI, or Ingestion API - or if you don't want Pulse to track incidents data.</p> </li> </ul>"},{"location":"one-click-integrations/jira-integration/#collected-data","title":"Collected data","text":"<p>The table below lists the data that the Jira integration collects from your Jira instance and the metrics that Pulse displays on the dashboards, calculated using the collected data.</p> Data collected from Jira Details Used in Issues              Issue data includes all issue status transitions.          Lead time and Cycle time on the Lead &amp; Cycle time dashboard Projects              Project data includes the name of the Jira projects.          Filters on the Lead &amp; Cycle time dashboard Issue types              Pulse groups issue types per name since in Jira you can have the same issue type name in different projects.             This means that, for example, the Pulse UI will group different issue types named Subtask and Sub-task under the name of the issue type that was processed first. For all effects, these issue types are the same for Pulse.          Filters on the Lead &amp; Cycle time dashboard Issues              Pulse detects incidents from issue data according to the defined strategy.          Time to recover and Change failure rate on the Accelerate Overview dashboard"},{"location":"one-click-integrations/jira-integration/#jira-permissions","title":"Which permissions does Pulse need from Jira?","text":"<p>Pulse requests only the necessary permissions/scopes from your Atlassian account to collect issues data from your Jira instance and keeps your information secure. See below the detailed list of permissions.</p> Classic scope Description <code>read:me</code> Pulse retrieves the email of the user installing the integration. <code>read:jira-work</code> Pulse requires this scope to perform the following actions:       <ul> <li>List all issue statuses associated with the active workflows to identify the transitions of the issue status, required to detect when an issue is closed or re-opened.</li> <li>Get the details of an issue for real-time processing.</li> <li>List projects to use on dashboard filters.</li> <li>List the closed issues of a project for historical data loading.</li> </ul> <code>manage:jira-webhook</code> Pulse uses Jira webhooks to retrieve data in real time."},{"location":"one-click-integrations/jira-integration/#see-also","title":"See also","text":"<ul> <li>Lead and Cycle time metrics</li> <li>Time to recover</li> <li>Change failure rate</li> </ul>"},{"location":"one-click-integrations/pagerduty-integration/","title":"PagerDuty integration","text":"<p>Pulse integrates with PagerDuty to receive data about incidents, necessary to calculate the metrics Time to recover and Change failure rate.</p>"},{"location":"one-click-integrations/pagerduty-integration/#setting-up-the-pagerduty-integration","title":"Setting up the PagerDuty integration","text":"<p>To set up the PagerDuty integration:</p> <ol> <li> <p>On Pulse, expand Integrations and select PagerDuty.</p> <p></p> </li> <li> <p>Fill in the necessary details:</p> <ul> <li>PagerDuty subdomain: Your custom PagerDuty subdomain. For example, <code>mysubdomain</code> if you use the URL <code>https://mysubdomain.pagerduty.com</code> to access PagerDuty.</li> <li>Pulse system name: Name of the system to associate with the incidents reported by this integration.</li> </ul> </li> <li> <p>Follow the instructions on the Pulse UI to create a new webhook on PagerDuty using the provided URL. For example:</p> <p></p> </li> </ol>"},{"location":"one-click-integrations/pagerduty-integration/#collected-data","title":"Collected data","text":"<p>The table below lists the data that the PagerDuty integration collects from your PagerDuty webhooks, together with:</p> <ul> <li>The mapping between the data collected from PagerDuty and the Pulse data model</li> <li>The metrics that Pulse calculates from the data to display on the dashboards</li> </ul> Data collected from PagerDuty Mapping to Pulse data model Used in Incident <p>Incident:</p> <ul> <li><code>identifier</code>: <code>id</code> (incident ID)</li> <li><code>timestamp_created</code>: <code>created_at</code> (date when the incident was first triggered)</li> <li><code>timestamp_resolved</code>: <code>last_status_change_at</code> (date of the last status change of the incident)</li> <li><code>system</code>: defined during the configuration process</li> </ul> Time to recover and Change failure rate on the Accelerate Overview dashboard"},{"location":"one-click-integrations/pagerduty-integration/#see-also","title":"See also","text":"<ul> <li>Accelerate metrics</li> </ul>"}]}