{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started with Pulse \u00b6 Pulse displays the following metrics to provide insights into the current and historic performance of your software delivery process: Accelerate metrics Lead time and review metrics Work in progress metrics To calculate these metrics, you must complete these main steps to set up Pulse and to collect information from key events of your particular software development workflow: Creating your organization on Pulse Your organization on Pulse will aggregate and present all information relevant to your software development workflow. Pushing data to Pulse Send data about the key events in your software delivery workflow to feed the Pulse dashboards in real time. Sharing access with teammates Invite your teammates to your Pulse organization to share the access to the dashboards and metrics. 1. Creating your organization on Pulse \u00b6 You must create an organization on Pulse to start the onboarding. Click the link in the welcome banner at the top of the page and follow the instructions. To add more organizations, click the name of the current organization on the top left-hand corner and select New Organization . 2. Pushing data to Pulse \u00b6 Currently, Pulse provides a push-based integration with your workflow using one of the following alternatives: One-click integrations Pulse currently supports the following \"one-click\" integrations that simplify the process of setting up your workflows to send data to Pulse: GitHub integration : reports changes and deployments PagerDuty integration : reports incidents We plan to continue developing integrations for the most popular Git providers, CI/CD platforms, and incident management tools. Pulse CLI The Pulse CLI is a binary that you can use to push data to Pulse directly from your CI/CD workflows. Pulse Ingestion API Use the Pulse Ingestion API in scenarios where it may not be feasible to use the CLI to send data to Pulse, such as when you have the data inside an application. Note We recommend that you use the integrations that match your stack because they're faster to set up. 3. Sharing access with teammates \u00b6 Share the Pulse dashboards with your teammates to bring more visibility to the metrics. The most convenient way of ensuring that all the members of your company have access to the Pulse dashboards is by enabling the feature Joining via email domain on the Organization members page. When this option is enabled, anyone who signs up to Pulse using an email address from your company is automatically added to your Pulse organization. Alternatively, copy the invitation link from the Organization members page and share the link with specific people. A convenient way to do this is to share and pin the link on your team's chat. The link is valid for 3 months, but you can refresh it at any moment. Newcomers will have access to all dashboards immediately after signing up without needing to perform any integration. About joining via email domain Consider the following when using joining via email domain : Joining via email domain isn't available for free email addresses. Each email domain can only be used in one Pulse organization. If an existing organization is already using your email domain to automatically join new users, you won't be able to activate this feature on another organization. You can only enable joining via the email domain that you used to sign in to Pulse. If you turn off the feature, you can only re-enable it using your email domain. Turning off joining via email domain doesn't remove users from the organization. If you turn off the feature, the users that joined while the feature was active will continue to have access to the organization on Pulse. If you come across any issues please contact support .","title":"Getting started with Pulse"},{"location":"#getting-started-with-pulse","text":"Pulse displays the following metrics to provide insights into the current and historic performance of your software delivery process: Accelerate metrics Lead time and review metrics Work in progress metrics To calculate these metrics, you must complete these main steps to set up Pulse and to collect information from key events of your particular software development workflow: Creating your organization on Pulse Your organization on Pulse will aggregate and present all information relevant to your software development workflow. Pushing data to Pulse Send data about the key events in your software delivery workflow to feed the Pulse dashboards in real time. Sharing access with teammates Invite your teammates to your Pulse organization to share the access to the dashboards and metrics.","title":"Getting started with Pulse"},{"location":"#1-creating-your-organization-on-pulse","text":"You must create an organization on Pulse to start the onboarding. Click the link in the welcome banner at the top of the page and follow the instructions. To add more organizations, click the name of the current organization on the top left-hand corner and select New Organization .","title":"1. Creating your organization on Pulse"},{"location":"#2-pushing-data-to-pulse","text":"Currently, Pulse provides a push-based integration with your workflow using one of the following alternatives: One-click integrations Pulse currently supports the following \"one-click\" integrations that simplify the process of setting up your workflows to send data to Pulse: GitHub integration : reports changes and deployments PagerDuty integration : reports incidents We plan to continue developing integrations for the most popular Git providers, CI/CD platforms, and incident management tools. Pulse CLI The Pulse CLI is a binary that you can use to push data to Pulse directly from your CI/CD workflows. Pulse Ingestion API Use the Pulse Ingestion API in scenarios where it may not be feasible to use the CLI to send data to Pulse, such as when you have the data inside an application. Note We recommend that you use the integrations that match your stack because they're faster to set up.","title":"2. Pushing data to Pulse"},{"location":"#3-sharing-access-with-teammates","text":"Share the Pulse dashboards with your teammates to bring more visibility to the metrics. The most convenient way of ensuring that all the members of your company have access to the Pulse dashboards is by enabling the feature Joining via email domain on the Organization members page. When this option is enabled, anyone who signs up to Pulse using an email address from your company is automatically added to your Pulse organization. Alternatively, copy the invitation link from the Organization members page and share the link with specific people. A convenient way to do this is to share and pin the link on your team's chat. The link is valid for 3 months, but you can refresh it at any moment. Newcomers will have access to all dashboards immediately after signing up without needing to perform any integration. About joining via email domain Consider the following when using joining via email domain : Joining via email domain isn't available for free email addresses. Each email domain can only be used in one Pulse organization. If an existing organization is already using your email domain to automatically join new users, you won't be able to activate this feature on another organization. You can only enable joining via the email domain that you used to sign in to Pulse. If you turn off the feature, you can only re-enable it using your email domain. Turning off joining via email domain doesn't remove users from the organization. If you turn off the feature, the users that joined while the feature was active will continue to have access to the organization on Pulse. If you come across any issues please contact support .","title":"3. Sharing access with teammates"},{"location":"cli/cli/","text":"Using the Pulse CLI \u00b6 To measure the performance of your team you must send information to Pulse about changes, deployments, and incidents whenever they happen in the software delivery workflow of your primary application or service. To push information about these key events to Pulse using the CLI you must complete these main steps: Installing the Pulse CLI Download and set up the latest version of the Pulse CLI binary. Pushing changes and deployments Push information about changes and deployments when they happen on your software delivery workflow. Pushing incidents Push information about incidents when they're solved. Before you begin \u00b6 Consider the following before setting up the integration using the Pulse CLI: Make sure that you have an API key provided by Pulse to identify your organization and authorize you to send data to Pulse. When reporting events to Pulse you should use the field system to associate each event with the most granular unit that you will use to filter data on the Pulse dashboards, such as by application or service, product, or any other entity or group of entities in your organization. Important Typically, the value of system should be the name of the CVS repository corresponding to the event. However, if you're using a monorepo the value of system should be the name of the component in the repository instead. Although the field system is optional, if you don't report this information you won't be able to filter the data on the Pulse dashboards. Events without a specified system will be grouped under a special system called _unknown_ . When reporting deployments to Pulse you should use the field teams to associate each deployment with the list of teams that contributed with changes included in the deployment. 1. Installing the Pulse CLI \u00b6 Download the latest version of the Pulse CLI for your operating system and make sure that you're able to run the binary. Take note of the latest version of the CLI: Run the command to download the correct binary for your operating system, changing <VERSION> to the latest version obtained on the previous step: Linux On 32-bit operating systems: curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_linux_386/pulse-event-cli && \\ chmod +x pulse-event-cli On 64-bit operating systems: curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_linux_amd64/pulse-event-cli && \\ chmod +x pulse-event-cli macOS curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_darwin_amd64/pulse-event-cli && \\ chmod +x pulse-event-cli Windows On 32-bit operating systems: curl -fsSL -o pulse-event-cli.exe https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_windows_386/pulse-event-cli.exe On 64-bit operating systems: curl -fsSL -o pulse-event-cli.exe https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_windows_amd64/pulse-event-cli.exe Test if you can run the CLI: Linux and macOS ./pulse-event-cli help Windows pulse-event-cli.exe help 2. Pushing changes and deployments \u00b6 Report an event to Pulse whenever your team deploys code to production, including the list of code changes included in that deployment: For SaaS applications, report the event on each deployment to your production environment. For self-hosted applications, a better option is to report the event each time you make an artifact available to any user of your application, such as when you release new binaries or upload a new version to an app store. Pulse uses these reports to calculate the metrics Lead time for changes and Deployment frequency . Using Git \u00b6 If you're using Git, send the following information when reporting changes and deployments to Pulse: Field Description Format previous-deployment-ref Git reference of the previous deployment. This can be a tag or a commit identifier. String identifier Version number or another unique identifier of the deployment. String timestamp Time when the deployment finished. Number (Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String teams Optional. Teams responsible for the changes in the deployment. String (comma-separated list) Run the following command to report a deployment and its changes: Linux and macOS git clone <Git repository URL> cd < local Git repository directory> ./pulse-event-cli push git deployment \\ --api-key \"<API key>\" \\ --previous-deployment-ref \"<previous deployment ref>\" \\ --identifier \"<deployment identifier>\" \\ --timestamp \" $( date +%s ) \" \\ [ --system \"<system>\" ] \\ [ --teams <comma-separated list of teams> ] Windows git clone <Git repository URL> cd < local Git repository directory> event-cli.exe push git deployment \\ --api-key \"<API key>\" \\ --previous-deployment-ref \"<previous deployment ref>\" \\ --identifier \"<deployment identifier>\" \\ --timestamp \"<timestamp>\" \\ [ --system \"<system>\" ] \\ [ --teams <comma-separated list of teams> ] The command automatically reports all commits done between the previous deployment and the HEAD of the Git repository as changes that belong to the deployment being reported. Without using Git \u00b6 If you don't use Git or prefer to have more fine-grained control over the information that you send when reporting changes and deployments, send separate reports for each change and deployment as described below. Tip If you're using Git, it's simpler to report changes and deployments together. Send the following information when reporting changes to Pulse: Field Description Format identifier The commit identifier. String timestamp Time when the commit was first pushed to the repository. Number (Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String Run the following command to report each change: Linux and macOS ./pulse-event-cli push change \\ --api-key \"<API key>\" \\ --identifier \"<change identifier>\" \\ --timestamp \" $( date +%s ) \" \\ [ --system \"<system>\" ] Windows event-cli.exe push change \\ --api-key \"<API key>\" \\ --identifier \"<change identifier>\" \\ --timestamp \"<timestamp>\" \\ [ --system \"<system>\" ] Send the following information when reporting deployments to Pulse: Field Description Format identifier Version number or another unique identifier of the deployment. String timestamp Time when the deployment finished. Number (Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String teams Optional. Teams responsible for the changes in the deployment. String (comma-separated list) Commit identifiers included in the deployment. String (space-separated list) Run the following command to report each deployment: Linux and macOS ./pulse-event-cli push deployment \\ --api-key \"<API key>\" \\ --identifier \"<deployment identifier>\" \\ --timestamp \" $( date +%s ) \" \\ [ --system \"<system>\" ] \\ [ --teams <comma-separated list of teams> ] \\ <space-separated list of commit identifiers> Windows event-cli.exe push deployment \\ --api-key \"<API key>\" \\ --identifier \"<deployment identifier>\" \\ --timestamp \"<timestamp>\" \\ [ --system \"<system>\" ] \\ [ --teams <comma-separated list of teams> ] \\ <space-separated list of commit identifiers> 3. Pushing incidents \u00b6 Report an event to Pulse whenever an incident resulting from a release or infrastructure configuration change to production is solved. Incidents are any form of degraded service that require remediation: The incident is created when you detect a service impairment or service outage in production. The incident is resolved when you apply a hotfix or patch, or when you rollback the changes to restore the service in production. Typically, it's possible to keep track of this information using your monitoring infrastructure or your ticketing system. Pulse uses these reports to calculate the metrics Median time to recovery and Change failure rate . Send the following information when reporting incidents to Pulse: Field Description Format identifier A unique identifier of the incident. String timestampCreated Time when the incident started or was detected. Number (Unix epoch timestamp in seconds) timestampResolved Time when the incident was resolved. Number (Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String Run the following command to report each incident: Linux and macOS ./pulse-event-cli push incident \\ --api-key \"<API key>\" \\ --identifier \"<incident identifier>\" \\ --timestampCreated \"<timestampCreated>\" \\ --timestampResolved \" $( date +%s ) \" \\ [ --system \"<system>\" ] Windows pulse-event-cli.exe push incident \\ --api-key \"<API key>\" \\ --identifier \"<incident identifier>\" \\ --timestampCreated \"<timestampCreated>\" \\ --timestampResolved \"<timestampResolved>\" \\ [ --system \"<system>\" ]","title":"Using the Pulse CLI"},{"location":"cli/cli/#using-the-pulse-cli","text":"To measure the performance of your team you must send information to Pulse about changes, deployments, and incidents whenever they happen in the software delivery workflow of your primary application or service. To push information about these key events to Pulse using the CLI you must complete these main steps: Installing the Pulse CLI Download and set up the latest version of the Pulse CLI binary. Pushing changes and deployments Push information about changes and deployments when they happen on your software delivery workflow. Pushing incidents Push information about incidents when they're solved.","title":"Using the Pulse CLI"},{"location":"cli/cli/#before-you-begin","text":"Consider the following before setting up the integration using the Pulse CLI: Make sure that you have an API key provided by Pulse to identify your organization and authorize you to send data to Pulse. When reporting events to Pulse you should use the field system to associate each event with the most granular unit that you will use to filter data on the Pulse dashboards, such as by application or service, product, or any other entity or group of entities in your organization. Important Typically, the value of system should be the name of the CVS repository corresponding to the event. However, if you're using a monorepo the value of system should be the name of the component in the repository instead. Although the field system is optional, if you don't report this information you won't be able to filter the data on the Pulse dashboards. Events without a specified system will be grouped under a special system called _unknown_ . When reporting deployments to Pulse you should use the field teams to associate each deployment with the list of teams that contributed with changes included in the deployment.","title":"Before you begin"},{"location":"cli/cli/#1-installing-the-pulse-cli","text":"Download the latest version of the Pulse CLI for your operating system and make sure that you're able to run the binary. Take note of the latest version of the CLI: Run the command to download the correct binary for your operating system, changing <VERSION> to the latest version obtained on the previous step: Linux On 32-bit operating systems: curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_linux_386/pulse-event-cli && \\ chmod +x pulse-event-cli On 64-bit operating systems: curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_linux_amd64/pulse-event-cli && \\ chmod +x pulse-event-cli macOS curl -fsSL -o pulse-event-cli https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_darwin_amd64/pulse-event-cli && \\ chmod +x pulse-event-cli Windows On 32-bit operating systems: curl -fsSL -o pulse-event-cli.exe https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_windows_386/pulse-event-cli.exe On 64-bit operating systems: curl -fsSL -o pulse-event-cli.exe https://artifacts.codacy.com/codacy/pulse/event-cli/<VERSION>/pulse-event-cli_windows_amd64/pulse-event-cli.exe Test if you can run the CLI: Linux and macOS ./pulse-event-cli help Windows pulse-event-cli.exe help","title":"1. Installing the Pulse CLI"},{"location":"cli/cli/#2-pushing-changes-and-deployments","text":"Report an event to Pulse whenever your team deploys code to production, including the list of code changes included in that deployment: For SaaS applications, report the event on each deployment to your production environment. For self-hosted applications, a better option is to report the event each time you make an artifact available to any user of your application, such as when you release new binaries or upload a new version to an app store. Pulse uses these reports to calculate the metrics Lead time for changes and Deployment frequency .","title":"2. Pushing changes and deployments"},{"location":"cli/cli/#using-git","text":"If you're using Git, send the following information when reporting changes and deployments to Pulse: Field Description Format previous-deployment-ref Git reference of the previous deployment. This can be a tag or a commit identifier. String identifier Version number or another unique identifier of the deployment. String timestamp Time when the deployment finished. Number (Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String teams Optional. Teams responsible for the changes in the deployment. String (comma-separated list) Run the following command to report a deployment and its changes: Linux and macOS git clone <Git repository URL> cd < local Git repository directory> ./pulse-event-cli push git deployment \\ --api-key \"<API key>\" \\ --previous-deployment-ref \"<previous deployment ref>\" \\ --identifier \"<deployment identifier>\" \\ --timestamp \" $( date +%s ) \" \\ [ --system \"<system>\" ] \\ [ --teams <comma-separated list of teams> ] Windows git clone <Git repository URL> cd < local Git repository directory> event-cli.exe push git deployment \\ --api-key \"<API key>\" \\ --previous-deployment-ref \"<previous deployment ref>\" \\ --identifier \"<deployment identifier>\" \\ --timestamp \"<timestamp>\" \\ [ --system \"<system>\" ] \\ [ --teams <comma-separated list of teams> ] The command automatically reports all commits done between the previous deployment and the HEAD of the Git repository as changes that belong to the deployment being reported.","title":"Using Git"},{"location":"cli/cli/#without-using-git","text":"If you don't use Git or prefer to have more fine-grained control over the information that you send when reporting changes and deployments, send separate reports for each change and deployment as described below. Tip If you're using Git, it's simpler to report changes and deployments together. Send the following information when reporting changes to Pulse: Field Description Format identifier The commit identifier. String timestamp Time when the commit was first pushed to the repository. Number (Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String Run the following command to report each change: Linux and macOS ./pulse-event-cli push change \\ --api-key \"<API key>\" \\ --identifier \"<change identifier>\" \\ --timestamp \" $( date +%s ) \" \\ [ --system \"<system>\" ] Windows event-cli.exe push change \\ --api-key \"<API key>\" \\ --identifier \"<change identifier>\" \\ --timestamp \"<timestamp>\" \\ [ --system \"<system>\" ] Send the following information when reporting deployments to Pulse: Field Description Format identifier Version number or another unique identifier of the deployment. String timestamp Time when the deployment finished. Number (Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String teams Optional. Teams responsible for the changes in the deployment. String (comma-separated list) Commit identifiers included in the deployment. String (space-separated list) Run the following command to report each deployment: Linux and macOS ./pulse-event-cli push deployment \\ --api-key \"<API key>\" \\ --identifier \"<deployment identifier>\" \\ --timestamp \" $( date +%s ) \" \\ [ --system \"<system>\" ] \\ [ --teams <comma-separated list of teams> ] \\ <space-separated list of commit identifiers> Windows event-cli.exe push deployment \\ --api-key \"<API key>\" \\ --identifier \"<deployment identifier>\" \\ --timestamp \"<timestamp>\" \\ [ --system \"<system>\" ] \\ [ --teams <comma-separated list of teams> ] \\ <space-separated list of commit identifiers>","title":"Without using Git"},{"location":"cli/cli/#3-pushing-incidents","text":"Report an event to Pulse whenever an incident resulting from a release or infrastructure configuration change to production is solved. Incidents are any form of degraded service that require remediation: The incident is created when you detect a service impairment or service outage in production. The incident is resolved when you apply a hotfix or patch, or when you rollback the changes to restore the service in production. Typically, it's possible to keep track of this information using your monitoring infrastructure or your ticketing system. Pulse uses these reports to calculate the metrics Median time to recovery and Change failure rate . Send the following information when reporting incidents to Pulse: Field Description Format identifier A unique identifier of the incident. String timestampCreated Time when the incident started or was detected. Number (Unix epoch timestamp in seconds) timestampResolved Time when the incident was resolved. Number (Unix epoch timestamp in seconds) system Optional. Repository or component to assign to this event. String Run the following command to report each incident: Linux and macOS ./pulse-event-cli push incident \\ --api-key \"<API key>\" \\ --identifier \"<incident identifier>\" \\ --timestampCreated \"<timestampCreated>\" \\ --timestampResolved \" $( date +%s ) \" \\ [ --system \"<system>\" ] Windows pulse-event-cli.exe push incident \\ --api-key \"<API key>\" \\ --identifier \"<incident identifier>\" \\ --timestampCreated \"<timestampCreated>\" \\ --timestampResolved \"<timestampResolved>\" \\ [ --system \"<system>\" ]","title":"3. Pushing incidents"},{"location":"cli/examples/","text":"Integration examples \u00b6 This page includes examples of scripts that we used to quickly populate our own Pulse dashboard with historical data. You can use the examples to understand better how you can integrate the Pulse CLI with your existing workflows, or adapt these examples to populate your Pulse dashboard with historical data from your team. Pushing historic changes and deployments \u00b6 In this example, we used the Pulse CLI to push past changes and deployments from a Git repository into Pulse. Deployments are identified using semantic version Git tags, and the changes are the commits included in those deployments. # example.sh #!/usr/bin/env bash set -e CREDENTIALS = \"xxx\" workdir = $( mktemp -d -t website-dora-XXXXXXXXXX ) function clean { rm -rf ${ workdir } } trap clean EXIT git clone git@bitbucket.org:qamine/codacy-website \" $workdir \" cd ${ workdir } mapfile -t deployments < < ( git for -each-ref --sort = creatordate --format '%(refname) %(objectname)' refs/tags | grep -E '^refs\\/tags\\/[0-9]+\\.[0-9]+\\.[0-9]+\\s' | awk -F \"\\/\" '{print $3}' ) previous_deployment = \"\" current_deployment = \"\" for deployment in \" ${ deployments [@] } \" do deployment_id = $( echo \" ${ deployment } \" | awk '{print $1}' ) deployment_sha = $( echo \" ${ deployment } \" | awk '{print $2}' ) deployment_date = $( git log --format = \"%at\" ${ deployment_sha } | head -n 1 ) # Skip deployments before date # If you are on macOS you need to use $(date -jf \"%b %d %Y\" \"Oct 01 2020\" +%s) instead if [ ${ deployment_date } -lt $( date -d \"Oct 01 2020\" +%s ) ] then continue fi if [ -z \" ${ previous_deployment } \" ] then previous_deployment = \" ${ deployment_sha } \" continue else current_deployment = \" ${ deployment_sha } \" deployment_changes =() mapfile -t deployment_changes < < ( git log --format = \"%H\" ${ previous_deployment } ... ${ current_deployment } ) if [ ${# deployment_changes [@] } -gt 0 ] then echo \"Pushing deployment ${ deployment_id } with changes [ ${ deployment_changes [@] } ]\" ./pulse-event-cli push deployment \\ --api-key \" ${ CREDENTIALS } \" \\ --identifier \" ${ deployment_id } \" \\ --timestamp \" ${ deployment_date } \" \\ ${ deployment_changes [@] } for deployment_change in \" ${ deployment_changes [@] } \" do deployment_change_date = $( git log --format = \"%at\" ${ deployment_change } --max-count = 1 ) echo \"Pushing changes ${ deployment_change } with date ${ deployment_change_date } \" ./pulse-event-cli push change \\ --api-key \" ${ CREDENTIALS } \" \\ --identifier \" ${ deployment_change } \" \\ --timestamp \" ${ deployment_change_date } \" done fi previous_deployment = \" ${ deployment_sha } \" fi done Pushing historic incidents \u00b6 In this example, we used the Pulse CLI to push past incidents from the Codacy status page API into Pulse. # incidents.py import requests import subprocess from datetime import datetime , timezone url = 'https://status.codacy.com/api/incidents' resp = requests . get ( url = url ) data = resp . json () def convert_to_unix_epoch ( date_time_str ): return str ( int ( datetime . strptime ( date_time_str , '%Y-%m- %d T%H:%M:%S. %f Z' ) . replace ( tzinfo = timezone . utc ) . timestamp ())) for incident in data : id = incident [ 'incidentID' ] created = convert_to_unix_epoch ( incident [ 'createdAt' ]) updated = convert_to_unix_epoch ( incident [ 'updatedAt' ]) if incident [ 'status' ] == 'Resolved' : print ( f 'Pushing incident { id } created in { created } and resolved at { updated } ' ) print ( created ) print ( updated ) bashCmd = [ \"./pulse-event-cli\" , \"push\" , \"incident\" , \"--api-key\" , \"xxx\" , \"--identifier\" , id , \"--timestampCreated\" , created , \"--timestampResolved\" , updated ] process = subprocess . Popen ( bashCmd , stdout = subprocess . PIPE ) output , error = process . communicate () else : print ( f \"Skipping incident { id } because it was not resolved\" )","title":"Integration examples"},{"location":"cli/examples/#integration-examples","text":"This page includes examples of scripts that we used to quickly populate our own Pulse dashboard with historical data. You can use the examples to understand better how you can integrate the Pulse CLI with your existing workflows, or adapt these examples to populate your Pulse dashboard with historical data from your team.","title":"Integration examples"},{"location":"cli/examples/#pushing-historic-changes-and-deployments","text":"In this example, we used the Pulse CLI to push past changes and deployments from a Git repository into Pulse. Deployments are identified using semantic version Git tags, and the changes are the commits included in those deployments. # example.sh #!/usr/bin/env bash set -e CREDENTIALS = \"xxx\" workdir = $( mktemp -d -t website-dora-XXXXXXXXXX ) function clean { rm -rf ${ workdir } } trap clean EXIT git clone git@bitbucket.org:qamine/codacy-website \" $workdir \" cd ${ workdir } mapfile -t deployments < < ( git for -each-ref --sort = creatordate --format '%(refname) %(objectname)' refs/tags | grep -E '^refs\\/tags\\/[0-9]+\\.[0-9]+\\.[0-9]+\\s' | awk -F \"\\/\" '{print $3}' ) previous_deployment = \"\" current_deployment = \"\" for deployment in \" ${ deployments [@] } \" do deployment_id = $( echo \" ${ deployment } \" | awk '{print $1}' ) deployment_sha = $( echo \" ${ deployment } \" | awk '{print $2}' ) deployment_date = $( git log --format = \"%at\" ${ deployment_sha } | head -n 1 ) # Skip deployments before date # If you are on macOS you need to use $(date -jf \"%b %d %Y\" \"Oct 01 2020\" +%s) instead if [ ${ deployment_date } -lt $( date -d \"Oct 01 2020\" +%s ) ] then continue fi if [ -z \" ${ previous_deployment } \" ] then previous_deployment = \" ${ deployment_sha } \" continue else current_deployment = \" ${ deployment_sha } \" deployment_changes =() mapfile -t deployment_changes < < ( git log --format = \"%H\" ${ previous_deployment } ... ${ current_deployment } ) if [ ${# deployment_changes [@] } -gt 0 ] then echo \"Pushing deployment ${ deployment_id } with changes [ ${ deployment_changes [@] } ]\" ./pulse-event-cli push deployment \\ --api-key \" ${ CREDENTIALS } \" \\ --identifier \" ${ deployment_id } \" \\ --timestamp \" ${ deployment_date } \" \\ ${ deployment_changes [@] } for deployment_change in \" ${ deployment_changes [@] } \" do deployment_change_date = $( git log --format = \"%at\" ${ deployment_change } --max-count = 1 ) echo \"Pushing changes ${ deployment_change } with date ${ deployment_change_date } \" ./pulse-event-cli push change \\ --api-key \" ${ CREDENTIALS } \" \\ --identifier \" ${ deployment_change } \" \\ --timestamp \" ${ deployment_change_date } \" done fi previous_deployment = \" ${ deployment_sha } \" fi done","title":"Pushing historic changes and deployments"},{"location":"cli/examples/#pushing-historic-incidents","text":"In this example, we used the Pulse CLI to push past incidents from the Codacy status page API into Pulse. # incidents.py import requests import subprocess from datetime import datetime , timezone url = 'https://status.codacy.com/api/incidents' resp = requests . get ( url = url ) data = resp . json () def convert_to_unix_epoch ( date_time_str ): return str ( int ( datetime . strptime ( date_time_str , '%Y-%m- %d T%H:%M:%S. %f Z' ) . replace ( tzinfo = timezone . utc ) . timestamp ())) for incident in data : id = incident [ 'incidentID' ] created = convert_to_unix_epoch ( incident [ 'createdAt' ]) updated = convert_to_unix_epoch ( incident [ 'updatedAt' ]) if incident [ 'status' ] == 'Resolved' : print ( f 'Pushing incident { id } created in { created } and resolved at { updated } ' ) print ( created ) print ( updated ) bashCmd = [ \"./pulse-event-cli\" , \"push\" , \"incident\" , \"--api-key\" , \"xxx\" , \"--identifier\" , id , \"--timestampCreated\" , created , \"--timestampResolved\" , updated ] process = subprocess . Popen ( bashCmd , stdout = subprocess . PIPE ) output , error = process . communicate () else : print ( f \"Skipping incident { id } because it was not resolved\" )","title":"Pushing historic incidents"},{"location":"metrics/accelerate/","text":"Accelerate metrics \u00b6 Pulse calculates the four key Accelerate metrics using strictly changes , deployments , and incidents data for a rolling window of the last 90 days: Deployment frequency Lead time for changes Median time to recover Change failure rate Deployment frequency \u00b6 How often your organization completes a deployment to production or releases code to end-users of your primary application or service: number of deployments per day Pulse uses the average value over a period of time to display aggregate deployment frequencies. Pulse determines your performance level for this metric as follows: Performance level 1 Deployment frequency Elite More than 50% of days have one or more deployments High More than 50% of weeks have 3 or more days with a deployment Medium More than 50% of weeks have at least one deployment Low More than 50% of months have at least one deployment Lead time for changes \u00b6 How long it takes a commit to get into production on your primary application or service: median(deployment timestamp - changes timestamp) Note The changes timestamp is when code is actually checked into a repository. Pulse uses the maximum value over a period of time to display aggregate lead time for changes. Pulse determines your performance level for this metric as follows: Performance level 1 Lead time for changes Elite Less than 1 hour High Between 1 hour and 1 week Medium Between 1 week and 1 month Low More than or equal to 1 month Median time to recover \u00b6 How long it takes your organization to recover from a failure in production (e.g., service impairment or unplanned outage): median(incident resolved timestamp - incident created timestamp) Pulse uses the maximum value over a period of time to display aggregate median times to recover. Pulse determines your performance level for this metric as follows: Performance level 1 Median time to recover Elite Less than 1 hour High, Medium 2 Less than 1 day Low More than or equal to 1 week Change failure rate \u00b6 Percentage of deployments causing a failure in production (e.g., service impairment or unplanned outage) and that subsequently require remediation: number of deployments that caused incidents / total number of deployments Pulse uses the average value over a period of time to display aggregate change failure rates. Note We decided to avoid requiring a relationship between incidents and deployments or changes to simplify the data model reported. As such, Pulse considers the deployment that caused an incident the closest deployment before the start of that incident . The same deployment might be responsible for multiple incidents. Pulse calculates the performance metrics per system and later aggregates the metrics by time interval when displaying them. This means that you need both deployments and incidents for Pulse to correctly map the system between the two types of events and for the metrics to work. Pulse determines your performance level for this metric as follows: Performance level 1 Change failure rate Elite 0-5% High, Medium 2 5-15% Low 15-100% Performance levels are based on the Accelerate State of DevOps 2019 report. The values for the Elite level have been updated using the highest level from Puppet's State of DevOps Report 2021 . \u21a9 \u21a9 \u21a9 \u21a9 Means are not significantly different based on Tukey's post hoc analysis ( State of DevOps 2019 pp. 18). \u21a9 \u21a9","title":"Accelerate metrics"},{"location":"metrics/accelerate/#accelerate-metrics","text":"Pulse calculates the four key Accelerate metrics using strictly changes , deployments , and incidents data for a rolling window of the last 90 days: Deployment frequency Lead time for changes Median time to recover Change failure rate","title":"Accelerate metrics"},{"location":"metrics/accelerate/#deployment-frequency","text":"How often your organization completes a deployment to production or releases code to end-users of your primary application or service: number of deployments per day Pulse uses the average value over a period of time to display aggregate deployment frequencies. Pulse determines your performance level for this metric as follows: Performance level 1 Deployment frequency Elite More than 50% of days have one or more deployments High More than 50% of weeks have 3 or more days with a deployment Medium More than 50% of weeks have at least one deployment Low More than 50% of months have at least one deployment","title":"Deployment frequency"},{"location":"metrics/accelerate/#lead-time-for-changes","text":"How long it takes a commit to get into production on your primary application or service: median(deployment timestamp - changes timestamp) Note The changes timestamp is when code is actually checked into a repository. Pulse uses the maximum value over a period of time to display aggregate lead time for changes. Pulse determines your performance level for this metric as follows: Performance level 1 Lead time for changes Elite Less than 1 hour High Between 1 hour and 1 week Medium Between 1 week and 1 month Low More than or equal to 1 month","title":"Lead time for changes"},{"location":"metrics/accelerate/#median-time-to-recover","text":"How long it takes your organization to recover from a failure in production (e.g., service impairment or unplanned outage): median(incident resolved timestamp - incident created timestamp) Pulse uses the maximum value over a period of time to display aggregate median times to recover. Pulse determines your performance level for this metric as follows: Performance level 1 Median time to recover Elite Less than 1 hour High, Medium 2 Less than 1 day Low More than or equal to 1 week","title":"Median time to recover"},{"location":"metrics/accelerate/#change-failure-rate","text":"Percentage of deployments causing a failure in production (e.g., service impairment or unplanned outage) and that subsequently require remediation: number of deployments that caused incidents / total number of deployments Pulse uses the average value over a period of time to display aggregate change failure rates. Note We decided to avoid requiring a relationship between incidents and deployments or changes to simplify the data model reported. As such, Pulse considers the deployment that caused an incident the closest deployment before the start of that incident . The same deployment might be responsible for multiple incidents. Pulse calculates the performance metrics per system and later aggregates the metrics by time interval when displaying them. This means that you need both deployments and incidents for Pulse to correctly map the system between the two types of events and for the metrics to work. Pulse determines your performance level for this metric as follows: Performance level 1 Change failure rate Elite 0-5% High, Medium 2 5-15% Low 15-100% Performance levels are based on the Accelerate State of DevOps 2019 report. The values for the Elite level have been updated using the highest level from Puppet's State of DevOps Report 2021 . \u21a9 \u21a9 \u21a9 \u21a9 Means are not significantly different based on Tukey's post hoc analysis ( State of DevOps 2019 pp. 18). \u21a9 \u21a9","title":"Change failure rate"},{"location":"metrics/lead-time-reviews/","text":"Lead time and review metrics \u00b6 Lead time for changes and review metrics provide an extra level of detail about the performance of your team workflows. Lead time for changes sub-metrics \u00b6 The following metrics directly influence Lead time for changes , and can help you track in more detail what needs to be improved in your workflow: Time to open Time to merge Pulse aggregates these metrics by week and presents values for the average and the 5%, 25%, 75%, and 95% percentiles. Note Pulse calculates these metrics based on pull request data and: Includes draft pull requests, meaning that the lifetime of pull requests includes the time marked as draft Excludes open and declined pull requests Excludes pull requests without commits and force pushed pull requests where the first commit was authored after the pull request was open Time to open \u00b6 An approximation of how long it takes for a change or feature to be developed: pull request open timestamp - first commit in pull request branch timestamp Time to merge \u00b6 How long does the code review process take for a change or feature: pull request merge timestamp - pull request open timestamp Review metrics \u00b6 The following metrics provide insights into the level of engagement and efficiency of your code review process: Time to first review Time to first approval Time from first to last approval Time from last approval to merge Outlier review details Note Pulse calculates these metrics based on pull request data and: Considers that reviews are approvals, change requests, and inline pull request comments, but not pull request conversation comments Excludes reviews and approvals that are done after the pull requests are merged. Time to first review \u00b6 How long does it take to have the first review on a pull request: first review timestamp - pull request open timestamp Time to first approval \u00b6 How long does it take to have the first approval on a pull request: first approval timestamp - pull request open timestamp Time from first to last approval \u00b6 How long does it take between the first and last approvals on a pull request: last approval timestamp - first approval timestamp Time from last approval to merge \u00b6 How long does it take to merge a pull request after the last approval: pull request merge timestamp - last approval timestamp Outlier review details \u00b6 Pulse displays the following details for each pull request in the chart Review time explorer : Name Description Time to review Time to merge a pull request Changes Number of lines of code changed in a pull request Commits Number of commits in a pull request, even if the pull request is squashed Comments Number of comments and review comments in a pull request","title":"Lead time and review metrics"},{"location":"metrics/lead-time-reviews/#lead-time-and-review-metrics","text":"Lead time for changes and review metrics provide an extra level of detail about the performance of your team workflows.","title":"Lead time and review metrics"},{"location":"metrics/lead-time-reviews/#lead-time-for-changes-sub-metrics","text":"The following metrics directly influence Lead time for changes , and can help you track in more detail what needs to be improved in your workflow: Time to open Time to merge Pulse aggregates these metrics by week and presents values for the average and the 5%, 25%, 75%, and 95% percentiles. Note Pulse calculates these metrics based on pull request data and: Includes draft pull requests, meaning that the lifetime of pull requests includes the time marked as draft Excludes open and declined pull requests Excludes pull requests without commits and force pushed pull requests where the first commit was authored after the pull request was open","title":"Lead time for changes sub-metrics"},{"location":"metrics/lead-time-reviews/#time-to-open","text":"An approximation of how long it takes for a change or feature to be developed: pull request open timestamp - first commit in pull request branch timestamp","title":"Time to open"},{"location":"metrics/lead-time-reviews/#time-to-merge","text":"How long does the code review process take for a change or feature: pull request merge timestamp - pull request open timestamp","title":"Time to merge"},{"location":"metrics/lead-time-reviews/#review-metrics","text":"The following metrics provide insights into the level of engagement and efficiency of your code review process: Time to first review Time to first approval Time from first to last approval Time from last approval to merge Outlier review details Note Pulse calculates these metrics based on pull request data and: Considers that reviews are approvals, change requests, and inline pull request comments, but not pull request conversation comments Excludes reviews and approvals that are done after the pull requests are merged.","title":"Review metrics"},{"location":"metrics/lead-time-reviews/#time-to-first-review","text":"How long does it take to have the first review on a pull request: first review timestamp - pull request open timestamp","title":"Time to first review"},{"location":"metrics/lead-time-reviews/#time-to-first-approval","text":"How long does it take to have the first approval on a pull request: first approval timestamp - pull request open timestamp","title":"Time to first approval"},{"location":"metrics/lead-time-reviews/#time-from-first-to-last-approval","text":"How long does it take between the first and last approvals on a pull request: last approval timestamp - first approval timestamp","title":"Time from first to last approval"},{"location":"metrics/lead-time-reviews/#time-from-last-approval-to-merge","text":"How long does it take to merge a pull request after the last approval: pull request merge timestamp - last approval timestamp","title":"Time from last approval to merge"},{"location":"metrics/lead-time-reviews/#outlier-review-details","text":"Pulse displays the following details for each pull request in the chart Review time explorer : Name Description Time to review Time to merge a pull request Changes Number of lines of code changed in a pull request Commits Number of commits in a pull request, even if the pull request is squashed Comments Number of comments and review comments in a pull request","title":"Outlier review details"},{"location":"metrics/work-in-progress/","text":"Work in progress metrics \u00b6 Pulse calculates the work in progress metrics based on the status of all pull requests targeting any base branch in your GitHub repositories. Important You must install the GitHub integration for Pulse to calculate the work in progress metrics. Work in progress \u00b6 To provide you with an high-level view of the current work in progress of your teams, Pulse groups pull requests that are currently open by the following phases: Open: the pull request is open but the team hasn't reviewed it. Reviewed: the pull request received at least one review but it isn't approved yet. These reviews include change requests and inline pull request comments, but don't include conversation comments. Approved: the pull request received at least one approval. Work in progress details \u00b6 The following metrics for each open pull request allow you to understand which work items are about to become or have become blockers and may need an action to move forward: Time in progress: time since that pull request is in progress. Phase: current phase of the pull request, can be one of Open , Reviewed , or Approved . Reviews: number of reviews of the pull request. Reviews include approvals, change requests, and inline pull request comments, but don't include conversation comments. Comments: number of comments of the pull request. Comments include inline pull request comments and conversation comments. Time stale: number of days since the pull request had the last interaction. Changes: number of lines of code changed by the pull request.","title":"Work in progress metrics"},{"location":"metrics/work-in-progress/#work-in-progress-metrics","text":"Pulse calculates the work in progress metrics based on the status of all pull requests targeting any base branch in your GitHub repositories. Important You must install the GitHub integration for Pulse to calculate the work in progress metrics.","title":"Work in progress metrics"},{"location":"metrics/work-in-progress/#work-in-progress","text":"To provide you with an high-level view of the current work in progress of your teams, Pulse groups pull requests that are currently open by the following phases: Open: the pull request is open but the team hasn't reviewed it. Reviewed: the pull request received at least one review but it isn't approved yet. These reviews include change requests and inline pull request comments, but don't include conversation comments. Approved: the pull request received at least one approval.","title":"Work in progress"},{"location":"metrics/work-in-progress/#work-in-progress-details","text":"The following metrics for each open pull request allow you to understand which work items are about to become or have become blockers and may need an action to move forward: Time in progress: time since that pull request is in progress. Phase: current phase of the pull request, can be one of Open , Reviewed , or Approved . Reviews: number of reviews of the pull request. Reviews include approvals, change requests, and inline pull request comments, but don't include conversation comments. Comments: number of comments of the pull request. Comments include inline pull request comments and conversation comments. Time stale: number of days since the pull request had the last interaction. Changes: number of lines of code changed by the pull request.","title":"Work in progress details"},{"location":"one-click-integrations/github-integration/","text":"GitHub integration \u00b6 Pulse integrates directly with GitHub to receive data about changes and deployments, necessary to calculate the metrics: Lead time for changes , including the following drill-down metrics: Lead time for changes sub-metrics Review metrics Work in progress metrics Deployment frequency Setting up the GitHub integration \u00b6 To set up the GitHub integration: On Pulse, expand Integrations and select GitHub . Click Install GitHub App and follow the instructions on the GitHub UI to install the app on your organization. Important You can only install the Pulse GitHub App on an organization and not on your personal account. Wait until you get a confirmation that Pulse successfully created the integration and the webhook on GitHub. If there was an error please contact support . Choose the strategy to detect deployments that best fits your workflows, or turn off the automatic deployment detection. See the section below for a detailed description of each option. Automatic deployment detection strategies \u00b6 The following is a detailed description of how the Pulse GitHub integration automatically detects deployment using each detection strategy: Use merged pull requests (default) Pulse considers a deployment every merged pull request that targets the default branch of the repository. The deployment date is the timestamp when the corresponding pull request is merged. The set of changes in a deployment is the list of commits in the corresponding pull request. Pulse correctly tracks your changes even if you squash the commits when merging the pull request. Pulse associates all GitHub teams of the author of a merged pull request with the corresponding deployment, excluding teams with less than two members. Pulse only takes changes to GitHub teams into account on pull requests merged after those changes. Use semantic versioning tags Pulse considers a deployment every Git tag that follows the SemVer convention, excluding pre-release versions but allowing release prefixes. For example, the following are valid tags: 1.0.0 , v2.3.4 . To use this strategy, make sure that you're creating Git tags on your repositories for each successful deployment to production, or whenever you make a new release available to any user of your application: git tag -a MAJOR.MINOR.PATCH -m \"<Deployment or release message>\" Where MAJOR.MINOR.PATCH must be a valid SemVer version without pre-release information. Check if your versioning syntax is valid . The deployment date is either the creation date of annotated tags or the timestamp when Pulse receives the webhook calls for lightweight tags . Keep in mind that since webhook calls can be delayed, the deployment date on Pulse could be imprecise and impact the metric Lead time for changes . The set of changes that belong to a deployment is the list of commits between the tag of that deployment and the previous tag. Because of this, Pulse discards: The first SemVer tag in the repository since there is no previous tag to compare with. Any tag that does not have a common ancestor (commit) with its previous tag, since Pulse cannot obtain the changes between them. Pulse associates all GitHub teams of the person who creates a Git tag with the corresponding deployment, excluding teams with less than two members. Pulse only takes changes to GitHub teams into account on Git tags created after those changes. Don't detect deployments automatically If the automatic deployment detection is turned off, Pulse doesn't detect deployments using GitHub events and you must report deployments using the Pulse CLI or the API. This is useful if none of the automatic deployment detection strategies match your workflow and you must have control over the way Pulse tracks your deployments. Collected data \u00b6 The table below lists the data that the GitHub integration collects from your GitHub organization, together with: The mapping between the data collected from GitHub and the Pulse data model The metrics that Pulse calculates from the data to display on the dashboards Data collected from GitHub Mapping to Pulse data model Used in Pull request commits Changes: change_id : commit UUID time_created : commit author date 1 system : repository name Lead time for changes on the Accelerate dashboard Pull requests, git tags, or none ( configurable ) Deployments: deploy_id : pull request ID system : repository name Deployment frequency and Change failure rate on the Accelerate dashboard Pull requests - Lead time and reviews dashboard , Work in progress dashboard Teams Deployments: teams : GitHub teams responsible for the changes in the deployment Filters for the Accelerate dashboard , Lead time and reviews dashboard , and Work in progress dashboard 1 : Pulse uses the commit author's date since it is more accurate. The committer date can be changed (e.g.: rebases) and stop reflecting the real creation date of the change.","title":"GitHub integration"},{"location":"one-click-integrations/github-integration/#github-integration","text":"Pulse integrates directly with GitHub to receive data about changes and deployments, necessary to calculate the metrics: Lead time for changes , including the following drill-down metrics: Lead time for changes sub-metrics Review metrics Work in progress metrics Deployment frequency","title":"GitHub integration"},{"location":"one-click-integrations/github-integration/#setting-up-the-github-integration","text":"To set up the GitHub integration: On Pulse, expand Integrations and select GitHub . Click Install GitHub App and follow the instructions on the GitHub UI to install the app on your organization. Important You can only install the Pulse GitHub App on an organization and not on your personal account. Wait until you get a confirmation that Pulse successfully created the integration and the webhook on GitHub. If there was an error please contact support . Choose the strategy to detect deployments that best fits your workflows, or turn off the automatic deployment detection. See the section below for a detailed description of each option.","title":"Setting up the GitHub integration"},{"location":"one-click-integrations/github-integration/#deployment-detection-strategy","text":"The following is a detailed description of how the Pulse GitHub integration automatically detects deployment using each detection strategy: Use merged pull requests (default) Pulse considers a deployment every merged pull request that targets the default branch of the repository. The deployment date is the timestamp when the corresponding pull request is merged. The set of changes in a deployment is the list of commits in the corresponding pull request. Pulse correctly tracks your changes even if you squash the commits when merging the pull request. Pulse associates all GitHub teams of the author of a merged pull request with the corresponding deployment, excluding teams with less than two members. Pulse only takes changes to GitHub teams into account on pull requests merged after those changes. Use semantic versioning tags Pulse considers a deployment every Git tag that follows the SemVer convention, excluding pre-release versions but allowing release prefixes. For example, the following are valid tags: 1.0.0 , v2.3.4 . To use this strategy, make sure that you're creating Git tags on your repositories for each successful deployment to production, or whenever you make a new release available to any user of your application: git tag -a MAJOR.MINOR.PATCH -m \"<Deployment or release message>\" Where MAJOR.MINOR.PATCH must be a valid SemVer version without pre-release information. Check if your versioning syntax is valid . The deployment date is either the creation date of annotated tags or the timestamp when Pulse receives the webhook calls for lightweight tags . Keep in mind that since webhook calls can be delayed, the deployment date on Pulse could be imprecise and impact the metric Lead time for changes . The set of changes that belong to a deployment is the list of commits between the tag of that deployment and the previous tag. Because of this, Pulse discards: The first SemVer tag in the repository since there is no previous tag to compare with. Any tag that does not have a common ancestor (commit) with its previous tag, since Pulse cannot obtain the changes between them. Pulse associates all GitHub teams of the person who creates a Git tag with the corresponding deployment, excluding teams with less than two members. Pulse only takes changes to GitHub teams into account on Git tags created after those changes. Don't detect deployments automatically If the automatic deployment detection is turned off, Pulse doesn't detect deployments using GitHub events and you must report deployments using the Pulse CLI or the API. This is useful if none of the automatic deployment detection strategies match your workflow and you must have control over the way Pulse tracks your deployments.","title":"Automatic deployment detection strategies"},{"location":"one-click-integrations/github-integration/#collected-data","text":"The table below lists the data that the GitHub integration collects from your GitHub organization, together with: The mapping between the data collected from GitHub and the Pulse data model The metrics that Pulse calculates from the data to display on the dashboards Data collected from GitHub Mapping to Pulse data model Used in Pull request commits Changes: change_id : commit UUID time_created : commit author date 1 system : repository name Lead time for changes on the Accelerate dashboard Pull requests, git tags, or none ( configurable ) Deployments: deploy_id : pull request ID system : repository name Deployment frequency and Change failure rate on the Accelerate dashboard Pull requests - Lead time and reviews dashboard , Work in progress dashboard Teams Deployments: teams : GitHub teams responsible for the changes in the deployment Filters for the Accelerate dashboard , Lead time and reviews dashboard , and Work in progress dashboard 1 : Pulse uses the commit author's date since it is more accurate. The committer date can be changed (e.g.: rebases) and stop reflecting the real creation date of the change.","title":"Collected data"},{"location":"one-click-integrations/pagerduty-integration/","text":"PagerDuty integration \u00b6 Pulse integrates directly with PagerDuty to receive data about incidents, necessary to calculate the metrics Median time to recover and Change failure rate . Setting up the PagerDuty integration \u00b6 To set up the PagerDuty integration: On Pulse, expand Integrations and select PagerDuty . Fill in the necessary details: PagerDuty subdomain: Your custom PagerDuty subdomain. For example, mysubdomain if you use the URL https://mysubdomain.pagerduty.com to access PagerDuty. Pulse system name: Name of the system to associate with the incidents reported by this integration. Follow the instructions on the Pulse UI to create a new webhook on PagerDuty using the provided URL. For example: Collected data \u00b6 The table below lists the data that the PagerDuty integration collects from your PagerDuty webhooks, together with: The mapping between the data collected from PagerDuty and the Pulse data model The metrics that Pulse calculates from the data to display on the dashboards Data collected from PagerDuty Mapping to Pulse data model Used in Incident Incident: identifier : id (incident ID) timestamp_created : created_at (date when the incident was first triggered) timestamp_resolved : last_status_change_at (date of the last status change of the incident) system : defined during the configuration process Median time to recover and Change failure rate on the Accelerate dashboard","title":"PagerDuty integration"},{"location":"one-click-integrations/pagerduty-integration/#pagerduty-integration","text":"Pulse integrates directly with PagerDuty to receive data about incidents, necessary to calculate the metrics Median time to recover and Change failure rate .","title":"PagerDuty integration"},{"location":"one-click-integrations/pagerduty-integration/#setting-up-the-pagerduty-integration","text":"To set up the PagerDuty integration: On Pulse, expand Integrations and select PagerDuty . Fill in the necessary details: PagerDuty subdomain: Your custom PagerDuty subdomain. For example, mysubdomain if you use the URL https://mysubdomain.pagerduty.com to access PagerDuty. Pulse system name: Name of the system to associate with the incidents reported by this integration. Follow the instructions on the Pulse UI to create a new webhook on PagerDuty using the provided URL. For example:","title":"Setting up the PagerDuty integration"},{"location":"one-click-integrations/pagerduty-integration/#collected-data","text":"The table below lists the data that the PagerDuty integration collects from your PagerDuty webhooks, together with: The mapping between the data collected from PagerDuty and the Pulse data model The metrics that Pulse calculates from the data to display on the dashboards Data collected from PagerDuty Mapping to Pulse data model Used in Incident Incident: identifier : id (incident ID) timestamp_created : created_at (date when the incident was first triggered) timestamp_resolved : last_status_change_at (date of the last status change of the incident) system : defined during the configuration process Median time to recover and Change failure rate on the Accelerate dashboard","title":"Collected data"}]}